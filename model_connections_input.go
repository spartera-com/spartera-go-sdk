/*
Spartera API Documentation

Auto-generated API documentation for REST services of the Spartera platform

API version: 1.24.0
Contact: support@spartera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sparteraapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConnectionsInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionsInput{}

// ConnectionsInput Input schema for creating Connection
type ConnectionsInput struct {
	UserId *string `json:"user_id,omitempty"`
	EngineId int64 `json:"engine_id"`
	CompanyId string `json:"company_id"`
	// Enum type: CredentialType
	CredentialType *string `json:"credential_type,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	ProviderDomain *string `json:"provider_domain,omitempty"`
	VerifiedUsageAbility *bool `json:"verified_usage_ability,omitempty"`
}

type _ConnectionsInput ConnectionsInput

// NewConnectionsInput instantiates a new ConnectionsInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionsInput(engineId int64, companyId string) *ConnectionsInput {
	this := ConnectionsInput{}
	this.EngineId = engineId
	this.CompanyId = companyId
	return &this
}

// NewConnectionsInputWithDefaults instantiates a new ConnectionsInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionsInputWithDefaults() *ConnectionsInput {
	this := ConnectionsInput{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ConnectionsInput) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionsInput) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ConnectionsInput) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *ConnectionsInput) SetUserId(v string) {
	o.UserId = &v
}

// GetEngineId returns the EngineId field value
func (o *ConnectionsInput) GetEngineId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value
// and a boolean to check if the value has been set.
func (o *ConnectionsInput) GetEngineIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EngineId, true
}

// SetEngineId sets field value
func (o *ConnectionsInput) SetEngineId(v int64) {
	o.EngineId = v
}

// GetCompanyId returns the CompanyId field value
func (o *ConnectionsInput) GetCompanyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value
// and a boolean to check if the value has been set.
func (o *ConnectionsInput) GetCompanyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyId, true
}

// SetCompanyId sets field value
func (o *ConnectionsInput) SetCompanyId(v string) {
	o.CompanyId = v
}

// GetCredentialType returns the CredentialType field value if set, zero value otherwise.
func (o *ConnectionsInput) GetCredentialType() string {
	if o == nil || IsNil(o.CredentialType) {
		var ret string
		return ret
	}
	return *o.CredentialType
}

// GetCredentialTypeOk returns a tuple with the CredentialType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionsInput) GetCredentialTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CredentialType) {
		return nil, false
	}
	return o.CredentialType, true
}

// HasCredentialType returns a boolean if a field has been set.
func (o *ConnectionsInput) HasCredentialType() bool {
	if o != nil && !IsNil(o.CredentialType) {
		return true
	}

	return false
}

// SetCredentialType gets a reference to the given string and assigns it to the CredentialType field.
func (o *ConnectionsInput) SetCredentialType(v string) {
	o.CredentialType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectionsInput) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionsInput) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectionsInput) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectionsInput) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConnectionsInput) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionsInput) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConnectionsInput) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConnectionsInput) SetDescription(v string) {
	o.Description = &v
}

// GetProviderDomain returns the ProviderDomain field value if set, zero value otherwise.
func (o *ConnectionsInput) GetProviderDomain() string {
	if o == nil || IsNil(o.ProviderDomain) {
		var ret string
		return ret
	}
	return *o.ProviderDomain
}

// GetProviderDomainOk returns a tuple with the ProviderDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionsInput) GetProviderDomainOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderDomain) {
		return nil, false
	}
	return o.ProviderDomain, true
}

// HasProviderDomain returns a boolean if a field has been set.
func (o *ConnectionsInput) HasProviderDomain() bool {
	if o != nil && !IsNil(o.ProviderDomain) {
		return true
	}

	return false
}

// SetProviderDomain gets a reference to the given string and assigns it to the ProviderDomain field.
func (o *ConnectionsInput) SetProviderDomain(v string) {
	o.ProviderDomain = &v
}

// GetVerifiedUsageAbility returns the VerifiedUsageAbility field value if set, zero value otherwise.
func (o *ConnectionsInput) GetVerifiedUsageAbility() bool {
	if o == nil || IsNil(o.VerifiedUsageAbility) {
		var ret bool
		return ret
	}
	return *o.VerifiedUsageAbility
}

// GetVerifiedUsageAbilityOk returns a tuple with the VerifiedUsageAbility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionsInput) GetVerifiedUsageAbilityOk() (*bool, bool) {
	if o == nil || IsNil(o.VerifiedUsageAbility) {
		return nil, false
	}
	return o.VerifiedUsageAbility, true
}

// HasVerifiedUsageAbility returns a boolean if a field has been set.
func (o *ConnectionsInput) HasVerifiedUsageAbility() bool {
	if o != nil && !IsNil(o.VerifiedUsageAbility) {
		return true
	}

	return false
}

// SetVerifiedUsageAbility gets a reference to the given bool and assigns it to the VerifiedUsageAbility field.
func (o *ConnectionsInput) SetVerifiedUsageAbility(v bool) {
	o.VerifiedUsageAbility = &v
}

func (o ConnectionsInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionsInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	toSerialize["engine_id"] = o.EngineId
	toSerialize["company_id"] = o.CompanyId
	if !IsNil(o.CredentialType) {
		toSerialize["credential_type"] = o.CredentialType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ProviderDomain) {
		toSerialize["provider_domain"] = o.ProviderDomain
	}
	if !IsNil(o.VerifiedUsageAbility) {
		toSerialize["verified_usage_ability"] = o.VerifiedUsageAbility
	}
	return toSerialize, nil
}

func (o *ConnectionsInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"engine_id",
		"company_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectionsInput := _ConnectionsInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectionsInput)

	if err != nil {
		return err
	}

	*o = ConnectionsInput(varConnectionsInput)

	return err
}

type NullableConnectionsInput struct {
	value *ConnectionsInput
	isSet bool
}

func (v NullableConnectionsInput) Get() *ConnectionsInput {
	return v.value
}

func (v *NullableConnectionsInput) Set(val *ConnectionsInput) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionsInput) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionsInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionsInput(val *ConnectionsInput) *NullableConnectionsInput {
	return &NullableConnectionsInput{value: val, isSet: true}
}

func (v NullableConnectionsInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionsInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


