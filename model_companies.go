/*
Spartera API Documentation

Auto-generated API documentation for REST services of the Spartera platform

API version: 1.24.0
Contact: support@spartera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sparteraapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Companies type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Companies{}

// Companies All of our customer company entities
type Companies struct {
	DateCreated *time.Time `json:"date_created,omitempty"`
	LastUpdated *time.Time `json:"last_updated,omitempty"`
	CompanyId *string `json:"company_id,omitempty"`
	IndustryId *int64 `json:"industry_id,omitempty"`
	CountryId *int64 `json:"country_id,omitempty"`
	CompanyName *string `json:"company_name,omitempty"`
	CompanyDescription *string `json:"company_description,omitempty"`
	CompanyHandle string `json:"company_handle"`
	CompanyDomain string `json:"company_domain"`
	// Current balance of credits for this company (buyer)
	CreditsBalance int64 `json:"credits_balance"`
	AcceptedEula *bool `json:"accepted_eula,omitempty"`
	// Stripe Connect account ID for marketplace sellers
	StripeAccountId *string `json:"stripe_account_id,omitempty"`
	// Status of the Stripe account (verified, pending, etc.)
	StripeAccountStatus *string `json:"stripe_account_status,omitempty"`
}

type _Companies Companies

// NewCompanies instantiates a new Companies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanies(companyHandle string, companyDomain string, creditsBalance int64) *Companies {
	this := Companies{}
	this.CompanyHandle = companyHandle
	this.CompanyDomain = companyDomain
	this.CreditsBalance = creditsBalance
	return &this
}

// NewCompaniesWithDefaults instantiates a new Companies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompaniesWithDefaults() *Companies {
	this := Companies{}
	return &this
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Companies) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Companies) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Companies) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *Companies) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Companies) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Companies) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Companies) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *Companies) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetCompanyId returns the CompanyId field value if set, zero value otherwise.
func (o *Companies) GetCompanyId() string {
	if o == nil || IsNil(o.CompanyId) {
		var ret string
		return ret
	}
	return *o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Companies) GetCompanyIdOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyId) {
		return nil, false
	}
	return o.CompanyId, true
}

// HasCompanyId returns a boolean if a field has been set.
func (o *Companies) HasCompanyId() bool {
	if o != nil && !IsNil(o.CompanyId) {
		return true
	}

	return false
}

// SetCompanyId gets a reference to the given string and assigns it to the CompanyId field.
func (o *Companies) SetCompanyId(v string) {
	o.CompanyId = &v
}

// GetIndustryId returns the IndustryId field value if set, zero value otherwise.
func (o *Companies) GetIndustryId() int64 {
	if o == nil || IsNil(o.IndustryId) {
		var ret int64
		return ret
	}
	return *o.IndustryId
}

// GetIndustryIdOk returns a tuple with the IndustryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Companies) GetIndustryIdOk() (*int64, bool) {
	if o == nil || IsNil(o.IndustryId) {
		return nil, false
	}
	return o.IndustryId, true
}

// HasIndustryId returns a boolean if a field has been set.
func (o *Companies) HasIndustryId() bool {
	if o != nil && !IsNil(o.IndustryId) {
		return true
	}

	return false
}

// SetIndustryId gets a reference to the given int64 and assigns it to the IndustryId field.
func (o *Companies) SetIndustryId(v int64) {
	o.IndustryId = &v
}

// GetCountryId returns the CountryId field value if set, zero value otherwise.
func (o *Companies) GetCountryId() int64 {
	if o == nil || IsNil(o.CountryId) {
		var ret int64
		return ret
	}
	return *o.CountryId
}

// GetCountryIdOk returns a tuple with the CountryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Companies) GetCountryIdOk() (*int64, bool) {
	if o == nil || IsNil(o.CountryId) {
		return nil, false
	}
	return o.CountryId, true
}

// HasCountryId returns a boolean if a field has been set.
func (o *Companies) HasCountryId() bool {
	if o != nil && !IsNil(o.CountryId) {
		return true
	}

	return false
}

// SetCountryId gets a reference to the given int64 and assigns it to the CountryId field.
func (o *Companies) SetCountryId(v int64) {
	o.CountryId = &v
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise.
func (o *Companies) GetCompanyName() string {
	if o == nil || IsNil(o.CompanyName) {
		var ret string
		return ret
	}
	return *o.CompanyName
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Companies) GetCompanyNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyName) {
		return nil, false
	}
	return o.CompanyName, true
}

// HasCompanyName returns a boolean if a field has been set.
func (o *Companies) HasCompanyName() bool {
	if o != nil && !IsNil(o.CompanyName) {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given string and assigns it to the CompanyName field.
func (o *Companies) SetCompanyName(v string) {
	o.CompanyName = &v
}

// GetCompanyDescription returns the CompanyDescription field value if set, zero value otherwise.
func (o *Companies) GetCompanyDescription() string {
	if o == nil || IsNil(o.CompanyDescription) {
		var ret string
		return ret
	}
	return *o.CompanyDescription
}

// GetCompanyDescriptionOk returns a tuple with the CompanyDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Companies) GetCompanyDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyDescription) {
		return nil, false
	}
	return o.CompanyDescription, true
}

// HasCompanyDescription returns a boolean if a field has been set.
func (o *Companies) HasCompanyDescription() bool {
	if o != nil && !IsNil(o.CompanyDescription) {
		return true
	}

	return false
}

// SetCompanyDescription gets a reference to the given string and assigns it to the CompanyDescription field.
func (o *Companies) SetCompanyDescription(v string) {
	o.CompanyDescription = &v
}

// GetCompanyHandle returns the CompanyHandle field value
func (o *Companies) GetCompanyHandle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyHandle
}

// GetCompanyHandleOk returns a tuple with the CompanyHandle field value
// and a boolean to check if the value has been set.
func (o *Companies) GetCompanyHandleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyHandle, true
}

// SetCompanyHandle sets field value
func (o *Companies) SetCompanyHandle(v string) {
	o.CompanyHandle = v
}

// GetCompanyDomain returns the CompanyDomain field value
func (o *Companies) GetCompanyDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyDomain
}

// GetCompanyDomainOk returns a tuple with the CompanyDomain field value
// and a boolean to check if the value has been set.
func (o *Companies) GetCompanyDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyDomain, true
}

// SetCompanyDomain sets field value
func (o *Companies) SetCompanyDomain(v string) {
	o.CompanyDomain = v
}

// GetCreditsBalance returns the CreditsBalance field value
func (o *Companies) GetCreditsBalance() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.CreditsBalance
}

// GetCreditsBalanceOk returns a tuple with the CreditsBalance field value
// and a boolean to check if the value has been set.
func (o *Companies) GetCreditsBalanceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditsBalance, true
}

// SetCreditsBalance sets field value
func (o *Companies) SetCreditsBalance(v int64) {
	o.CreditsBalance = v
}

// GetAcceptedEula returns the AcceptedEula field value if set, zero value otherwise.
func (o *Companies) GetAcceptedEula() bool {
	if o == nil || IsNil(o.AcceptedEula) {
		var ret bool
		return ret
	}
	return *o.AcceptedEula
}

// GetAcceptedEulaOk returns a tuple with the AcceptedEula field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Companies) GetAcceptedEulaOk() (*bool, bool) {
	if o == nil || IsNil(o.AcceptedEula) {
		return nil, false
	}
	return o.AcceptedEula, true
}

// HasAcceptedEula returns a boolean if a field has been set.
func (o *Companies) HasAcceptedEula() bool {
	if o != nil && !IsNil(o.AcceptedEula) {
		return true
	}

	return false
}

// SetAcceptedEula gets a reference to the given bool and assigns it to the AcceptedEula field.
func (o *Companies) SetAcceptedEula(v bool) {
	o.AcceptedEula = &v
}

// GetStripeAccountId returns the StripeAccountId field value if set, zero value otherwise.
func (o *Companies) GetStripeAccountId() string {
	if o == nil || IsNil(o.StripeAccountId) {
		var ret string
		return ret
	}
	return *o.StripeAccountId
}

// GetStripeAccountIdOk returns a tuple with the StripeAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Companies) GetStripeAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.StripeAccountId) {
		return nil, false
	}
	return o.StripeAccountId, true
}

// HasStripeAccountId returns a boolean if a field has been set.
func (o *Companies) HasStripeAccountId() bool {
	if o != nil && !IsNil(o.StripeAccountId) {
		return true
	}

	return false
}

// SetStripeAccountId gets a reference to the given string and assigns it to the StripeAccountId field.
func (o *Companies) SetStripeAccountId(v string) {
	o.StripeAccountId = &v
}

// GetStripeAccountStatus returns the StripeAccountStatus field value if set, zero value otherwise.
func (o *Companies) GetStripeAccountStatus() string {
	if o == nil || IsNil(o.StripeAccountStatus) {
		var ret string
		return ret
	}
	return *o.StripeAccountStatus
}

// GetStripeAccountStatusOk returns a tuple with the StripeAccountStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Companies) GetStripeAccountStatusOk() (*string, bool) {
	if o == nil || IsNil(o.StripeAccountStatus) {
		return nil, false
	}
	return o.StripeAccountStatus, true
}

// HasStripeAccountStatus returns a boolean if a field has been set.
func (o *Companies) HasStripeAccountStatus() bool {
	if o != nil && !IsNil(o.StripeAccountStatus) {
		return true
	}

	return false
}

// SetStripeAccountStatus gets a reference to the given string and assigns it to the StripeAccountStatus field.
func (o *Companies) SetStripeAccountStatus(v string) {
	o.StripeAccountStatus = &v
}

func (o Companies) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Companies) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateCreated) {
		toSerialize["date_created"] = o.DateCreated
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if !IsNil(o.CompanyId) {
		toSerialize["company_id"] = o.CompanyId
	}
	if !IsNil(o.IndustryId) {
		toSerialize["industry_id"] = o.IndustryId
	}
	if !IsNil(o.CountryId) {
		toSerialize["country_id"] = o.CountryId
	}
	if !IsNil(o.CompanyName) {
		toSerialize["company_name"] = o.CompanyName
	}
	if !IsNil(o.CompanyDescription) {
		toSerialize["company_description"] = o.CompanyDescription
	}
	toSerialize["company_handle"] = o.CompanyHandle
	toSerialize["company_domain"] = o.CompanyDomain
	toSerialize["credits_balance"] = o.CreditsBalance
	if !IsNil(o.AcceptedEula) {
		toSerialize["accepted_eula"] = o.AcceptedEula
	}
	if !IsNil(o.StripeAccountId) {
		toSerialize["stripe_account_id"] = o.StripeAccountId
	}
	if !IsNil(o.StripeAccountStatus) {
		toSerialize["stripe_account_status"] = o.StripeAccountStatus
	}
	return toSerialize, nil
}

func (o *Companies) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"company_handle",
		"company_domain",
		"credits_balance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompanies := _Companies{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompanies)

	if err != nil {
		return err
	}

	*o = Companies(varCompanies)

	return err
}

type NullableCompanies struct {
	value *Companies
	isSet bool
}

func (v NullableCompanies) Get() *Companies {
	return v.value
}

func (v *NullableCompanies) Set(val *Companies) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanies) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanies(val *Companies) *NullableCompanies {
	return &NullableCompanies{value: val, isSet: true}
}

func (v NullableCompanies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


