/*
Spartera API Documentation

Auto-generated API documentation for REST services of the Spartera platform

API version: 1.24.0
Contact: support@spartera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sparteraapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AssetPriceHistoryAPIService AssetPriceHistoryAPI service
type AssetPriceHistoryAPIService service

type AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesActiveGetRequest struct {
	ctx context.Context
	ApiService *AssetPriceHistoryAPIService
	companyId string
	assetId string
}

func (r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesActiveGetRequest) Execute() (*CompaniesCompanyIdAssetsAssetIdPricesGet200Response, *http.Response, error) {
	return r.ApiService.CompaniesCompanyIdAssetsAssetIdPricesActiveGetExecute(r)
}

/*
CompaniesCompanyIdAssetsAssetIdPricesActiveGet Get the currently active price for an asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyId
 @param assetId
 @return AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesActiveGetRequest
*/
func (a *AssetPriceHistoryAPIService) CompaniesCompanyIdAssetsAssetIdPricesActiveGet(ctx context.Context, companyId string, assetId string) AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesActiveGetRequest {
	return AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesActiveGetRequest{
		ApiService: a,
		ctx: ctx,
		companyId: companyId,
		assetId: assetId,
	}
}

// Execute executes the request
//  @return CompaniesCompanyIdAssetsAssetIdPricesGet200Response
func (a *AssetPriceHistoryAPIService) CompaniesCompanyIdAssetsAssetIdPricesActiveGetExecute(r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesActiveGetRequest) (*CompaniesCompanyIdAssetsAssetIdPricesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompaniesCompanyIdAssetsAssetIdPricesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssetPriceHistoryAPIService.CompaniesCompanyIdAssetsAssetIdPricesActiveGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/companies/{company_id}/assets/{asset_id}/prices/active"
	localVarPath = strings.Replace(localVarPath, "{"+"company_id"+"}", url.PathEscape(parameterValueToString(r.companyId, "companyId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"asset_id"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineObject1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineObject2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineObject3
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdDeleteRequest struct {
	ctx context.Context
	ApiService *AssetPriceHistoryAPIService
	companyId string
	assetId string
	aphId string
}

func (r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdDeleteRequest) Execute() (*CompaniesCompanyIdAssetsAssetIdPricesAphIdDelete200Response, *http.Response, error) {
	return r.ApiService.CompaniesCompanyIdAssetsAssetIdPricesAphIdDeleteExecute(r)
}

/*
CompaniesCompanyIdAssetsAssetIdPricesAphIdDelete Delete single price history record by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyId
 @param assetId
 @param aphId
 @return AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdDeleteRequest
*/
func (a *AssetPriceHistoryAPIService) CompaniesCompanyIdAssetsAssetIdPricesAphIdDelete(ctx context.Context, companyId string, assetId string, aphId string) AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdDeleteRequest {
	return AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		companyId: companyId,
		assetId: assetId,
		aphId: aphId,
	}
}

// Execute executes the request
//  @return CompaniesCompanyIdAssetsAssetIdPricesAphIdDelete200Response
func (a *AssetPriceHistoryAPIService) CompaniesCompanyIdAssetsAssetIdPricesAphIdDeleteExecute(r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdDeleteRequest) (*CompaniesCompanyIdAssetsAssetIdPricesAphIdDelete200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompaniesCompanyIdAssetsAssetIdPricesAphIdDelete200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssetPriceHistoryAPIService.CompaniesCompanyIdAssetsAssetIdPricesAphIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/companies/{company_id}/assets/{asset_id}/prices/{aph_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"company_id"+"}", url.PathEscape(parameterValueToString(r.companyId, "companyId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"asset_id"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aph_id"+"}", url.PathEscape(parameterValueToString(r.aphId, "aphId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineObject1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineObject2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineObject3
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdGetRequest struct {
	ctx context.Context
	ApiService *AssetPriceHistoryAPIService
	companyId string
	assetId string
	aphId string
}

func (r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdGetRequest) Execute() (*CompaniesCompanyIdAssetsAssetIdPricesAphIdGet200Response, *http.Response, error) {
	return r.ApiService.CompaniesCompanyIdAssetsAssetIdPricesAphIdGetExecute(r)
}

/*
CompaniesCompanyIdAssetsAssetIdPricesAphIdGet Get single price history record by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyId
 @param assetId
 @param aphId
 @return AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdGetRequest
*/
func (a *AssetPriceHistoryAPIService) CompaniesCompanyIdAssetsAssetIdPricesAphIdGet(ctx context.Context, companyId string, assetId string, aphId string) AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdGetRequest {
	return AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdGetRequest{
		ApiService: a,
		ctx: ctx,
		companyId: companyId,
		assetId: assetId,
		aphId: aphId,
	}
}

// Execute executes the request
//  @return CompaniesCompanyIdAssetsAssetIdPricesAphIdGet200Response
func (a *AssetPriceHistoryAPIService) CompaniesCompanyIdAssetsAssetIdPricesAphIdGetExecute(r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdGetRequest) (*CompaniesCompanyIdAssetsAssetIdPricesAphIdGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompaniesCompanyIdAssetsAssetIdPricesAphIdGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssetPriceHistoryAPIService.CompaniesCompanyIdAssetsAssetIdPricesAphIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/companies/{company_id}/assets/{asset_id}/prices/{aph_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"company_id"+"}", url.PathEscape(parameterValueToString(r.companyId, "companyId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"asset_id"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aph_id"+"}", url.PathEscape(parameterValueToString(r.aphId, "aphId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineObject1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineObject2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineObject3
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdPatchRequest struct {
	ctx context.Context
	ApiService *AssetPriceHistoryAPIService
	companyId string
	assetId string
	aphId string
	assetPriceHistoryUpdate *AssetPriceHistoryUpdate
}

func (r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdPatchRequest) AssetPriceHistoryUpdate(assetPriceHistoryUpdate AssetPriceHistoryUpdate) AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdPatchRequest {
	r.assetPriceHistoryUpdate = &assetPriceHistoryUpdate
	return r
}

func (r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdPatchRequest) Execute() (*CompaniesCompanyIdAssetsAssetIdPricesAphIdPatch200Response, *http.Response, error) {
	return r.ApiService.CompaniesCompanyIdAssetsAssetIdPricesAphIdPatchExecute(r)
}

/*
CompaniesCompanyIdAssetsAssetIdPricesAphIdPatch Update an existing price history record by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyId
 @param assetId
 @param aphId
 @return AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdPatchRequest
*/
func (a *AssetPriceHistoryAPIService) CompaniesCompanyIdAssetsAssetIdPricesAphIdPatch(ctx context.Context, companyId string, assetId string, aphId string) AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdPatchRequest {
	return AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		companyId: companyId,
		assetId: assetId,
		aphId: aphId,
	}
}

// Execute executes the request
//  @return CompaniesCompanyIdAssetsAssetIdPricesAphIdPatch200Response
func (a *AssetPriceHistoryAPIService) CompaniesCompanyIdAssetsAssetIdPricesAphIdPatchExecute(r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesAphIdPatchRequest) (*CompaniesCompanyIdAssetsAssetIdPricesAphIdPatch200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompaniesCompanyIdAssetsAssetIdPricesAphIdPatch200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssetPriceHistoryAPIService.CompaniesCompanyIdAssetsAssetIdPricesAphIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/companies/{company_id}/assets/{asset_id}/prices/{aph_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"company_id"+"}", url.PathEscape(parameterValueToString(r.companyId, "companyId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"asset_id"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"aph_id"+"}", url.PathEscape(parameterValueToString(r.aphId, "aphId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assetPriceHistoryUpdate == nil {
		return localVarReturnValue, nil, reportError("assetPriceHistoryUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.assetPriceHistoryUpdate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineObject1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineObject2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineObject
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineObject3
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesCalculateCreditsPostRequest struct {
	ctx context.Context
	ApiService *AssetPriceHistoryAPIService
	companyId string
	assetId string
	assetPriceHistoryInput *AssetPriceHistoryInput
}

func (r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesCalculateCreditsPostRequest) AssetPriceHistoryInput(assetPriceHistoryInput AssetPriceHistoryInput) AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesCalculateCreditsPostRequest {
	r.assetPriceHistoryInput = &assetPriceHistoryInput
	return r
}

func (r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesCalculateCreditsPostRequest) Execute() (*CompaniesCompanyIdAssetsAssetIdPricesPost200Response, *http.Response, error) {
	return r.ApiService.CompaniesCompanyIdAssetsAssetIdPricesCalculateCreditsPostExecute(r)
}

/*
CompaniesCompanyIdAssetsAssetIdPricesCalculateCreditsPost Calculate the credit equivalent for a given USD price without saving

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyId
 @param assetId
 @return AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesCalculateCreditsPostRequest
*/
func (a *AssetPriceHistoryAPIService) CompaniesCompanyIdAssetsAssetIdPricesCalculateCreditsPost(ctx context.Context, companyId string, assetId string) AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesCalculateCreditsPostRequest {
	return AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesCalculateCreditsPostRequest{
		ApiService: a,
		ctx: ctx,
		companyId: companyId,
		assetId: assetId,
	}
}

// Execute executes the request
//  @return CompaniesCompanyIdAssetsAssetIdPricesPost200Response
func (a *AssetPriceHistoryAPIService) CompaniesCompanyIdAssetsAssetIdPricesCalculateCreditsPostExecute(r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesCalculateCreditsPostRequest) (*CompaniesCompanyIdAssetsAssetIdPricesPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompaniesCompanyIdAssetsAssetIdPricesPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssetPriceHistoryAPIService.CompaniesCompanyIdAssetsAssetIdPricesCalculateCreditsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/companies/{company_id}/assets/{asset_id}/prices/calculate_credits"
	localVarPath = strings.Replace(localVarPath, "{"+"company_id"+"}", url.PathEscape(parameterValueToString(r.companyId, "companyId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"asset_id"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assetPriceHistoryInput == nil {
		return localVarReturnValue, nil, reportError("assetPriceHistoryInput is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.assetPriceHistoryInput
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineObject1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineObject2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineObject
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesDiscountPostRequest struct {
	ctx context.Context
	ApiService *AssetPriceHistoryAPIService
	companyId string
	assetId string
	assetPriceHistoryInput *AssetPriceHistoryInput
}

func (r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesDiscountPostRequest) AssetPriceHistoryInput(assetPriceHistoryInput AssetPriceHistoryInput) AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesDiscountPostRequest {
	r.assetPriceHistoryInput = &assetPriceHistoryInput
	return r
}

func (r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesDiscountPostRequest) Execute() (*CompaniesCompanyIdAssetsAssetIdPricesPost200Response, *http.Response, error) {
	return r.ApiService.CompaniesCompanyIdAssetsAssetIdPricesDiscountPostExecute(r)
}

/*
CompaniesCompanyIdAssetsAssetIdPricesDiscountPost POST /companies/{company_id}/assets/{asset_id}/prices/discount

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyId
 @param assetId
 @return AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesDiscountPostRequest
*/
func (a *AssetPriceHistoryAPIService) CompaniesCompanyIdAssetsAssetIdPricesDiscountPost(ctx context.Context, companyId string, assetId string) AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesDiscountPostRequest {
	return AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesDiscountPostRequest{
		ApiService: a,
		ctx: ctx,
		companyId: companyId,
		assetId: assetId,
	}
}

// Execute executes the request
//  @return CompaniesCompanyIdAssetsAssetIdPricesPost200Response
func (a *AssetPriceHistoryAPIService) CompaniesCompanyIdAssetsAssetIdPricesDiscountPostExecute(r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesDiscountPostRequest) (*CompaniesCompanyIdAssetsAssetIdPricesPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompaniesCompanyIdAssetsAssetIdPricesPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssetPriceHistoryAPIService.CompaniesCompanyIdAssetsAssetIdPricesDiscountPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/companies/{company_id}/assets/{asset_id}/prices/discount"
	localVarPath = strings.Replace(localVarPath, "{"+"company_id"+"}", url.PathEscape(parameterValueToString(r.companyId, "companyId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"asset_id"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assetPriceHistoryInput == nil {
		return localVarReturnValue, nil, reportError("assetPriceHistoryInput is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.assetPriceHistoryInput
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineObject1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineObject2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineObject
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesGetRequest struct {
	ctx context.Context
	ApiService *AssetPriceHistoryAPIService
	companyId string
	assetId string
}

func (r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesGetRequest) Execute() (*CompaniesCompanyIdAssetsAssetIdPricesGet200Response, *http.Response, error) {
	return r.ApiService.CompaniesCompanyIdAssetsAssetIdPricesGetExecute(r)
}

/*
CompaniesCompanyIdAssetsAssetIdPricesGet Get all price history records for a specific asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyId
 @param assetId
 @return AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesGetRequest
*/
func (a *AssetPriceHistoryAPIService) CompaniesCompanyIdAssetsAssetIdPricesGet(ctx context.Context, companyId string, assetId string) AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesGetRequest {
	return AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesGetRequest{
		ApiService: a,
		ctx: ctx,
		companyId: companyId,
		assetId: assetId,
	}
}

// Execute executes the request
//  @return CompaniesCompanyIdAssetsAssetIdPricesGet200Response
func (a *AssetPriceHistoryAPIService) CompaniesCompanyIdAssetsAssetIdPricesGetExecute(r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesGetRequest) (*CompaniesCompanyIdAssetsAssetIdPricesGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompaniesCompanyIdAssetsAssetIdPricesGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssetPriceHistoryAPIService.CompaniesCompanyIdAssetsAssetIdPricesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/companies/{company_id}/assets/{asset_id}/prices"
	localVarPath = strings.Replace(localVarPath, "{"+"company_id"+"}", url.PathEscape(parameterValueToString(r.companyId, "companyId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"asset_id"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineObject1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineObject2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineObject3
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesPostRequest struct {
	ctx context.Context
	ApiService *AssetPriceHistoryAPIService
	companyId string
	assetId string
	assetPriceHistoryInput *AssetPriceHistoryInput
}

func (r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesPostRequest) AssetPriceHistoryInput(assetPriceHistoryInput AssetPriceHistoryInput) AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesPostRequest {
	r.assetPriceHistoryInput = &assetPriceHistoryInput
	return r
}

func (r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesPostRequest) Execute() (*CompaniesCompanyIdAssetsAssetIdPricesPost200Response, *http.Response, error) {
	return r.ApiService.CompaniesCompanyIdAssetsAssetIdPricesPostExecute(r)
}

/*
CompaniesCompanyIdAssetsAssetIdPricesPost Create a new price history record for an asset

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyId
 @param assetId
 @return AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesPostRequest
*/
func (a *AssetPriceHistoryAPIService) CompaniesCompanyIdAssetsAssetIdPricesPost(ctx context.Context, companyId string, assetId string) AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesPostRequest {
	return AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesPostRequest{
		ApiService: a,
		ctx: ctx,
		companyId: companyId,
		assetId: assetId,
	}
}

// Execute executes the request
//  @return CompaniesCompanyIdAssetsAssetIdPricesPost200Response
func (a *AssetPriceHistoryAPIService) CompaniesCompanyIdAssetsAssetIdPricesPostExecute(r AssetPriceHistoryAPICompaniesCompanyIdAssetsAssetIdPricesPostRequest) (*CompaniesCompanyIdAssetsAssetIdPricesPost200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompaniesCompanyIdAssetsAssetIdPricesPost200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AssetPriceHistoryAPIService.CompaniesCompanyIdAssetsAssetIdPricesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/companies/{company_id}/assets/{asset_id}/prices"
	localVarPath = strings.Replace(localVarPath, "{"+"company_id"+"}", url.PathEscape(parameterValueToString(r.companyId, "companyId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"asset_id"+"}", url.PathEscape(parameterValueToString(r.assetId, "assetId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.assetPriceHistoryInput == nil {
		return localVarReturnValue, nil, reportError("assetPriceHistoryInput is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.assetPriceHistoryInput
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v InlineObject1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v InlineObject2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InlineObject
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
