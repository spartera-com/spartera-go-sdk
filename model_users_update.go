/*
Spartera API Documentation

Auto-generated API documentation for REST services of the Spartera platform

API version: 1.24.0
Contact: support@spartera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sparteraapi

import (
	"encoding/json"
)

// checks if the UsersUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsersUpdate{}

// UsersUpdate Update schema for modifying User
type UsersUpdate struct {
	CompanyId *string `json:"company_id,omitempty"`
	FunctionId *int64 `json:"function_id,omitempty"`
	// Enum type: StatusCodes
	Status *string `json:"status,omitempty"`
	EmailAddress *string `json:"email_address,omitempty"`
	Timezone *string `json:"timezone,omitempty"`
}

// NewUsersUpdate instantiates a new UsersUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersUpdate() *UsersUpdate {
	this := UsersUpdate{}
	return &this
}

// NewUsersUpdateWithDefaults instantiates a new UsersUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersUpdateWithDefaults() *UsersUpdate {
	this := UsersUpdate{}
	return &this
}

// GetCompanyId returns the CompanyId field value if set, zero value otherwise.
func (o *UsersUpdate) GetCompanyId() string {
	if o == nil || IsNil(o.CompanyId) {
		var ret string
		return ret
	}
	return *o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersUpdate) GetCompanyIdOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyId) {
		return nil, false
	}
	return o.CompanyId, true
}

// HasCompanyId returns a boolean if a field has been set.
func (o *UsersUpdate) HasCompanyId() bool {
	if o != nil && !IsNil(o.CompanyId) {
		return true
	}

	return false
}

// SetCompanyId gets a reference to the given string and assigns it to the CompanyId field.
func (o *UsersUpdate) SetCompanyId(v string) {
	o.CompanyId = &v
}

// GetFunctionId returns the FunctionId field value if set, zero value otherwise.
func (o *UsersUpdate) GetFunctionId() int64 {
	if o == nil || IsNil(o.FunctionId) {
		var ret int64
		return ret
	}
	return *o.FunctionId
}

// GetFunctionIdOk returns a tuple with the FunctionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersUpdate) GetFunctionIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FunctionId) {
		return nil, false
	}
	return o.FunctionId, true
}

// HasFunctionId returns a boolean if a field has been set.
func (o *UsersUpdate) HasFunctionId() bool {
	if o != nil && !IsNil(o.FunctionId) {
		return true
	}

	return false
}

// SetFunctionId gets a reference to the given int64 and assigns it to the FunctionId field.
func (o *UsersUpdate) SetFunctionId(v int64) {
	o.FunctionId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UsersUpdate) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersUpdate) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UsersUpdate) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *UsersUpdate) SetStatus(v string) {
	o.Status = &v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *UsersUpdate) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress) {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersUpdate) GetEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *UsersUpdate) HasEmailAddress() bool {
	if o != nil && !IsNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *UsersUpdate) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *UsersUpdate) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersUpdate) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *UsersUpdate) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *UsersUpdate) SetTimezone(v string) {
	o.Timezone = &v
}

func (o UsersUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsersUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompanyId) {
		toSerialize["company_id"] = o.CompanyId
	}
	if !IsNil(o.FunctionId) {
		toSerialize["function_id"] = o.FunctionId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.EmailAddress) {
		toSerialize["email_address"] = o.EmailAddress
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	return toSerialize, nil
}

type NullableUsersUpdate struct {
	value *UsersUpdate
	isSet bool
}

func (v NullableUsersUpdate) Get() *UsersUpdate {
	return v.value
}

func (v *NullableUsersUpdate) Set(val *UsersUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersUpdate(val *UsersUpdate) *NullableUsersUpdate {
	return &NullableUsersUpdate{value: val, isSet: true}
}

func (v NullableUsersUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


