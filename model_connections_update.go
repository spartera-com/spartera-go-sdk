/*
Spartera API Documentation

Auto-generated API documentation for REST services of the Spartera platform

API version: 1.24.0
Contact: support@spartera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sparteraapi

import (
	"encoding/json"
)

// checks if the ConnectionsUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionsUpdate{}

// ConnectionsUpdate Update schema for modifying Connection
type ConnectionsUpdate struct {
	UserId *string `json:"user_id,omitempty"`
	EngineId *int64 `json:"engine_id,omitempty"`
	CompanyId *string `json:"company_id,omitempty"`
	// Enum type: CredentialType
	CredentialType *string `json:"credential_type,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	ProviderDomain *string `json:"provider_domain,omitempty"`
	VerifiedUsageAbility *bool `json:"verified_usage_ability,omitempty"`
}

// NewConnectionsUpdate instantiates a new ConnectionsUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionsUpdate() *ConnectionsUpdate {
	this := ConnectionsUpdate{}
	return &this
}

// NewConnectionsUpdateWithDefaults instantiates a new ConnectionsUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionsUpdateWithDefaults() *ConnectionsUpdate {
	this := ConnectionsUpdate{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ConnectionsUpdate) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionsUpdate) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ConnectionsUpdate) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *ConnectionsUpdate) SetUserId(v string) {
	o.UserId = &v
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *ConnectionsUpdate) GetEngineId() int64 {
	if o == nil || IsNil(o.EngineId) {
		var ret int64
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionsUpdate) GetEngineIdOk() (*int64, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *ConnectionsUpdate) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given int64 and assigns it to the EngineId field.
func (o *ConnectionsUpdate) SetEngineId(v int64) {
	o.EngineId = &v
}

// GetCompanyId returns the CompanyId field value if set, zero value otherwise.
func (o *ConnectionsUpdate) GetCompanyId() string {
	if o == nil || IsNil(o.CompanyId) {
		var ret string
		return ret
	}
	return *o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionsUpdate) GetCompanyIdOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyId) {
		return nil, false
	}
	return o.CompanyId, true
}

// HasCompanyId returns a boolean if a field has been set.
func (o *ConnectionsUpdate) HasCompanyId() bool {
	if o != nil && !IsNil(o.CompanyId) {
		return true
	}

	return false
}

// SetCompanyId gets a reference to the given string and assigns it to the CompanyId field.
func (o *ConnectionsUpdate) SetCompanyId(v string) {
	o.CompanyId = &v
}

// GetCredentialType returns the CredentialType field value if set, zero value otherwise.
func (o *ConnectionsUpdate) GetCredentialType() string {
	if o == nil || IsNil(o.CredentialType) {
		var ret string
		return ret
	}
	return *o.CredentialType
}

// GetCredentialTypeOk returns a tuple with the CredentialType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionsUpdate) GetCredentialTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CredentialType) {
		return nil, false
	}
	return o.CredentialType, true
}

// HasCredentialType returns a boolean if a field has been set.
func (o *ConnectionsUpdate) HasCredentialType() bool {
	if o != nil && !IsNil(o.CredentialType) {
		return true
	}

	return false
}

// SetCredentialType gets a reference to the given string and assigns it to the CredentialType field.
func (o *ConnectionsUpdate) SetCredentialType(v string) {
	o.CredentialType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectionsUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionsUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectionsUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectionsUpdate) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConnectionsUpdate) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionsUpdate) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConnectionsUpdate) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConnectionsUpdate) SetDescription(v string) {
	o.Description = &v
}

// GetProviderDomain returns the ProviderDomain field value if set, zero value otherwise.
func (o *ConnectionsUpdate) GetProviderDomain() string {
	if o == nil || IsNil(o.ProviderDomain) {
		var ret string
		return ret
	}
	return *o.ProviderDomain
}

// GetProviderDomainOk returns a tuple with the ProviderDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionsUpdate) GetProviderDomainOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderDomain) {
		return nil, false
	}
	return o.ProviderDomain, true
}

// HasProviderDomain returns a boolean if a field has been set.
func (o *ConnectionsUpdate) HasProviderDomain() bool {
	if o != nil && !IsNil(o.ProviderDomain) {
		return true
	}

	return false
}

// SetProviderDomain gets a reference to the given string and assigns it to the ProviderDomain field.
func (o *ConnectionsUpdate) SetProviderDomain(v string) {
	o.ProviderDomain = &v
}

// GetVerifiedUsageAbility returns the VerifiedUsageAbility field value if set, zero value otherwise.
func (o *ConnectionsUpdate) GetVerifiedUsageAbility() bool {
	if o == nil || IsNil(o.VerifiedUsageAbility) {
		var ret bool
		return ret
	}
	return *o.VerifiedUsageAbility
}

// GetVerifiedUsageAbilityOk returns a tuple with the VerifiedUsageAbility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionsUpdate) GetVerifiedUsageAbilityOk() (*bool, bool) {
	if o == nil || IsNil(o.VerifiedUsageAbility) {
		return nil, false
	}
	return o.VerifiedUsageAbility, true
}

// HasVerifiedUsageAbility returns a boolean if a field has been set.
func (o *ConnectionsUpdate) HasVerifiedUsageAbility() bool {
	if o != nil && !IsNil(o.VerifiedUsageAbility) {
		return true
	}

	return false
}

// SetVerifiedUsageAbility gets a reference to the given bool and assigns it to the VerifiedUsageAbility field.
func (o *ConnectionsUpdate) SetVerifiedUsageAbility(v bool) {
	o.VerifiedUsageAbility = &v
}

func (o ConnectionsUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionsUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.CompanyId) {
		toSerialize["company_id"] = o.CompanyId
	}
	if !IsNil(o.CredentialType) {
		toSerialize["credential_type"] = o.CredentialType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ProviderDomain) {
		toSerialize["provider_domain"] = o.ProviderDomain
	}
	if !IsNil(o.VerifiedUsageAbility) {
		toSerialize["verified_usage_ability"] = o.VerifiedUsageAbility
	}
	return toSerialize, nil
}

type NullableConnectionsUpdate struct {
	value *ConnectionsUpdate
	isSet bool
}

func (v NullableConnectionsUpdate) Get() *ConnectionsUpdate {
	return v.value
}

func (v *NullableConnectionsUpdate) Set(val *ConnectionsUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionsUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionsUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionsUpdate(val *ConnectionsUpdate) *NullableConnectionsUpdate {
	return &NullableConnectionsUpdate{value: val, isSet: true}
}

func (v NullableConnectionsUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionsUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


