/*
Spartera API Documentation

Auto-generated API documentation for REST services of the Spartera platform

API version: 1.24.0
Contact: support@spartera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sparteraapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UsersInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsersInput{}

// UsersInput Input schema for creating User
type UsersInput struct {
	CompanyId string `json:"company_id"`
	FunctionId *int64 `json:"function_id,omitempty"`
	// Enum type: StatusCodes
	Status *string `json:"status,omitempty"`
	EmailAddress *string `json:"email_address,omitempty"`
	Timezone *string `json:"timezone,omitempty"`
}

type _UsersInput UsersInput

// NewUsersInput instantiates a new UsersInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersInput(companyId string) *UsersInput {
	this := UsersInput{}
	this.CompanyId = companyId
	return &this
}

// NewUsersInputWithDefaults instantiates a new UsersInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersInputWithDefaults() *UsersInput {
	this := UsersInput{}
	return &this
}

// GetCompanyId returns the CompanyId field value
func (o *UsersInput) GetCompanyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value
// and a boolean to check if the value has been set.
func (o *UsersInput) GetCompanyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyId, true
}

// SetCompanyId sets field value
func (o *UsersInput) SetCompanyId(v string) {
	o.CompanyId = v
}

// GetFunctionId returns the FunctionId field value if set, zero value otherwise.
func (o *UsersInput) GetFunctionId() int64 {
	if o == nil || IsNil(o.FunctionId) {
		var ret int64
		return ret
	}
	return *o.FunctionId
}

// GetFunctionIdOk returns a tuple with the FunctionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersInput) GetFunctionIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FunctionId) {
		return nil, false
	}
	return o.FunctionId, true
}

// HasFunctionId returns a boolean if a field has been set.
func (o *UsersInput) HasFunctionId() bool {
	if o != nil && !IsNil(o.FunctionId) {
		return true
	}

	return false
}

// SetFunctionId gets a reference to the given int64 and assigns it to the FunctionId field.
func (o *UsersInput) SetFunctionId(v int64) {
	o.FunctionId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UsersInput) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersInput) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UsersInput) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *UsersInput) SetStatus(v string) {
	o.Status = &v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise.
func (o *UsersInput) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress) {
		var ret string
		return ret
	}
	return *o.EmailAddress
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersInput) GetEmailAddressOk() (*string, bool) {
	if o == nil || IsNil(o.EmailAddress) {
		return nil, false
	}
	return o.EmailAddress, true
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *UsersInput) HasEmailAddress() bool {
	if o != nil && !IsNil(o.EmailAddress) {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given string and assigns it to the EmailAddress field.
func (o *UsersInput) SetEmailAddress(v string) {
	o.EmailAddress = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *UsersInput) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersInput) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *UsersInput) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *UsersInput) SetTimezone(v string) {
	o.Timezone = &v
}

func (o UsersInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsersInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["company_id"] = o.CompanyId
	if !IsNil(o.FunctionId) {
		toSerialize["function_id"] = o.FunctionId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.EmailAddress) {
		toSerialize["email_address"] = o.EmailAddress
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	return toSerialize, nil
}

func (o *UsersInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"company_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUsersInput := _UsersInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUsersInput)

	if err != nil {
		return err
	}

	*o = UsersInput(varUsersInput)

	return err
}

type NullableUsersInput struct {
	value *UsersInput
	isSet bool
}

func (v NullableUsersInput) Get() *UsersInput {
	return v.value
}

func (v *NullableUsersInput) Set(val *UsersInput) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersInput) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersInput(val *UsersInput) *NullableUsersInput {
	return &NullableUsersInput{value: val, isSet: true}
}

func (v NullableUsersInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


