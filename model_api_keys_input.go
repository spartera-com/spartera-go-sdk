/*
Spartera API Documentation

Auto-generated API documentation for REST services of the Spartera platform

API version: 1.24.0
Contact: support@spartera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sparteraapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ApiKeysInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiKeysInput{}

// ApiKeysInput Input schema for creating ApiKey
type ApiKeysInput struct {
	// User who owns this API key
	UserId *string `json:"user_id,omitempty"`
	// Company this API key belongs to
	CompanyId string `json:"company_id"`
	// Role/permission level for this API key
	RoleId int64 `json:"role_id"`
	// Human-readable name for this API key
	Name *string `json:"name,omitempty"`
	// When this API key expires (NULL = never expires)
	ExpirationDateUtc *time.Time `json:"expiration_date_utc,omitempty"`
}

type _ApiKeysInput ApiKeysInput

// NewApiKeysInput instantiates a new ApiKeysInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiKeysInput(companyId string, roleId int64) *ApiKeysInput {
	this := ApiKeysInput{}
	this.CompanyId = companyId
	this.RoleId = roleId
	return &this
}

// NewApiKeysInputWithDefaults instantiates a new ApiKeysInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiKeysInputWithDefaults() *ApiKeysInput {
	this := ApiKeysInput{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ApiKeysInput) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKeysInput) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ApiKeysInput) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *ApiKeysInput) SetUserId(v string) {
	o.UserId = &v
}

// GetCompanyId returns the CompanyId field value
func (o *ApiKeysInput) GetCompanyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value
// and a boolean to check if the value has been set.
func (o *ApiKeysInput) GetCompanyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyId, true
}

// SetCompanyId sets field value
func (o *ApiKeysInput) SetCompanyId(v string) {
	o.CompanyId = v
}

// GetRoleId returns the RoleId field value
func (o *ApiKeysInput) GetRoleId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value
// and a boolean to check if the value has been set.
func (o *ApiKeysInput) GetRoleIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleId, true
}

// SetRoleId sets field value
func (o *ApiKeysInput) SetRoleId(v int64) {
	o.RoleId = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ApiKeysInput) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKeysInput) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ApiKeysInput) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ApiKeysInput) SetName(v string) {
	o.Name = &v
}

// GetExpirationDateUtc returns the ExpirationDateUtc field value if set, zero value otherwise.
func (o *ApiKeysInput) GetExpirationDateUtc() time.Time {
	if o == nil || IsNil(o.ExpirationDateUtc) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDateUtc
}

// GetExpirationDateUtcOk returns a tuple with the ExpirationDateUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiKeysInput) GetExpirationDateUtcOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDateUtc) {
		return nil, false
	}
	return o.ExpirationDateUtc, true
}

// HasExpirationDateUtc returns a boolean if a field has been set.
func (o *ApiKeysInput) HasExpirationDateUtc() bool {
	if o != nil && !IsNil(o.ExpirationDateUtc) {
		return true
	}

	return false
}

// SetExpirationDateUtc gets a reference to the given time.Time and assigns it to the ExpirationDateUtc field.
func (o *ApiKeysInput) SetExpirationDateUtc(v time.Time) {
	o.ExpirationDateUtc = &v
}

func (o ApiKeysInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiKeysInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	toSerialize["company_id"] = o.CompanyId
	toSerialize["role_id"] = o.RoleId
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ExpirationDateUtc) {
		toSerialize["expiration_date_utc"] = o.ExpirationDateUtc
	}
	return toSerialize, nil
}

func (o *ApiKeysInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"company_id",
		"role_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApiKeysInput := _ApiKeysInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApiKeysInput)

	if err != nil {
		return err
	}

	*o = ApiKeysInput(varApiKeysInput)

	return err
}

type NullableApiKeysInput struct {
	value *ApiKeysInput
	isSet bool
}

func (v NullableApiKeysInput) Get() *ApiKeysInput {
	return v.value
}

func (v *NullableApiKeysInput) Set(val *ApiKeysInput) {
	v.value = val
	v.isSet = true
}

func (v NullableApiKeysInput) IsSet() bool {
	return v.isSet
}

func (v *NullableApiKeysInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiKeysInput(val *ApiKeysInput) *NullableApiKeysInput {
	return &NullableApiKeysInput{value: val, isSet: true}
}

func (v NullableApiKeysInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiKeysInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


