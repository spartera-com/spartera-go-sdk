/*
Spartera API Documentation

Auto-generated API documentation for REST services of the Spartera platform

API version: 0.0.0
Contact: support@spartera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sparteraapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Assetpricehistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Assetpricehistory{}

// Assetpricehistory Pricing history for an asset
type Assetpricehistory struct {
	AphId *string `json:"aph_id,omitempty"`
	AssetId string `json:"asset_id"`
	PriceUsd *float64 `json:"price_usd,omitempty"`
	PriceCredits *string `json:"price_credits,omitempty"`
	DiscountPercentage *float32 `json:"discount_percentage,omitempty"`
	SaleStartDate *string `json:"sale_start_date,omitempty"`
	SaleEndDate *string `json:"sale_end_date,omitempty"`
	DateEnded *string `json:"date_ended,omitempty"`
	DateCreated *string `json:"date_created,omitempty"`
	LastUpdated *string `json:"last_updated,omitempty"`
	Active string `json:"active"`
}

type _Assetpricehistory Assetpricehistory

// NewAssetpricehistory instantiates a new Assetpricehistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetpricehistory(assetId string, active string) *Assetpricehistory {
	this := Assetpricehistory{}
	this.AssetId = assetId
	this.Active = active
	return &this
}

// NewAssetpricehistoryWithDefaults instantiates a new Assetpricehistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetpricehistoryWithDefaults() *Assetpricehistory {
	this := Assetpricehistory{}
	return &this
}

// GetAphId returns the AphId field value if set, zero value otherwise.
func (o *Assetpricehistory) GetAphId() string {
	if o == nil || IsNil(o.AphId) {
		var ret string
		return ret
	}
	return *o.AphId
}

// GetAphIdOk returns a tuple with the AphId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assetpricehistory) GetAphIdOk() (*string, bool) {
	if o == nil || IsNil(o.AphId) {
		return nil, false
	}
	return o.AphId, true
}

// HasAphId returns a boolean if a field has been set.
func (o *Assetpricehistory) HasAphId() bool {
	if o != nil && !IsNil(o.AphId) {
		return true
	}

	return false
}

// SetAphId gets a reference to the given string and assigns it to the AphId field.
func (o *Assetpricehistory) SetAphId(v string) {
	o.AphId = &v
}

// GetAssetId returns the AssetId field value
func (o *Assetpricehistory) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *Assetpricehistory) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *Assetpricehistory) SetAssetId(v string) {
	o.AssetId = v
}

// GetPriceUsd returns the PriceUsd field value if set, zero value otherwise.
func (o *Assetpricehistory) GetPriceUsd() float64 {
	if o == nil || IsNil(o.PriceUsd) {
		var ret float64
		return ret
	}
	return *o.PriceUsd
}

// GetPriceUsdOk returns a tuple with the PriceUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assetpricehistory) GetPriceUsdOk() (*float64, bool) {
	if o == nil || IsNil(o.PriceUsd) {
		return nil, false
	}
	return o.PriceUsd, true
}

// HasPriceUsd returns a boolean if a field has been set.
func (o *Assetpricehistory) HasPriceUsd() bool {
	if o != nil && !IsNil(o.PriceUsd) {
		return true
	}

	return false
}

// SetPriceUsd gets a reference to the given float64 and assigns it to the PriceUsd field.
func (o *Assetpricehistory) SetPriceUsd(v float64) {
	o.PriceUsd = &v
}

// GetPriceCredits returns the PriceCredits field value if set, zero value otherwise.
func (o *Assetpricehistory) GetPriceCredits() string {
	if o == nil || IsNil(o.PriceCredits) {
		var ret string
		return ret
	}
	return *o.PriceCredits
}

// GetPriceCreditsOk returns a tuple with the PriceCredits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assetpricehistory) GetPriceCreditsOk() (*string, bool) {
	if o == nil || IsNil(o.PriceCredits) {
		return nil, false
	}
	return o.PriceCredits, true
}

// HasPriceCredits returns a boolean if a field has been set.
func (o *Assetpricehistory) HasPriceCredits() bool {
	if o != nil && !IsNil(o.PriceCredits) {
		return true
	}

	return false
}

// SetPriceCredits gets a reference to the given string and assigns it to the PriceCredits field.
func (o *Assetpricehistory) SetPriceCredits(v string) {
	o.PriceCredits = &v
}

// GetDiscountPercentage returns the DiscountPercentage field value if set, zero value otherwise.
func (o *Assetpricehistory) GetDiscountPercentage() float32 {
	if o == nil || IsNil(o.DiscountPercentage) {
		var ret float32
		return ret
	}
	return *o.DiscountPercentage
}

// GetDiscountPercentageOk returns a tuple with the DiscountPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assetpricehistory) GetDiscountPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.DiscountPercentage) {
		return nil, false
	}
	return o.DiscountPercentage, true
}

// HasDiscountPercentage returns a boolean if a field has been set.
func (o *Assetpricehistory) HasDiscountPercentage() bool {
	if o != nil && !IsNil(o.DiscountPercentage) {
		return true
	}

	return false
}

// SetDiscountPercentage gets a reference to the given float32 and assigns it to the DiscountPercentage field.
func (o *Assetpricehistory) SetDiscountPercentage(v float32) {
	o.DiscountPercentage = &v
}

// GetSaleStartDate returns the SaleStartDate field value if set, zero value otherwise.
func (o *Assetpricehistory) GetSaleStartDate() string {
	if o == nil || IsNil(o.SaleStartDate) {
		var ret string
		return ret
	}
	return *o.SaleStartDate
}

// GetSaleStartDateOk returns a tuple with the SaleStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assetpricehistory) GetSaleStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.SaleStartDate) {
		return nil, false
	}
	return o.SaleStartDate, true
}

// HasSaleStartDate returns a boolean if a field has been set.
func (o *Assetpricehistory) HasSaleStartDate() bool {
	if o != nil && !IsNil(o.SaleStartDate) {
		return true
	}

	return false
}

// SetSaleStartDate gets a reference to the given string and assigns it to the SaleStartDate field.
func (o *Assetpricehistory) SetSaleStartDate(v string) {
	o.SaleStartDate = &v
}

// GetSaleEndDate returns the SaleEndDate field value if set, zero value otherwise.
func (o *Assetpricehistory) GetSaleEndDate() string {
	if o == nil || IsNil(o.SaleEndDate) {
		var ret string
		return ret
	}
	return *o.SaleEndDate
}

// GetSaleEndDateOk returns a tuple with the SaleEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assetpricehistory) GetSaleEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.SaleEndDate) {
		return nil, false
	}
	return o.SaleEndDate, true
}

// HasSaleEndDate returns a boolean if a field has been set.
func (o *Assetpricehistory) HasSaleEndDate() bool {
	if o != nil && !IsNil(o.SaleEndDate) {
		return true
	}

	return false
}

// SetSaleEndDate gets a reference to the given string and assigns it to the SaleEndDate field.
func (o *Assetpricehistory) SetSaleEndDate(v string) {
	o.SaleEndDate = &v
}

// GetDateEnded returns the DateEnded field value if set, zero value otherwise.
func (o *Assetpricehistory) GetDateEnded() string {
	if o == nil || IsNil(o.DateEnded) {
		var ret string
		return ret
	}
	return *o.DateEnded
}

// GetDateEndedOk returns a tuple with the DateEnded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assetpricehistory) GetDateEndedOk() (*string, bool) {
	if o == nil || IsNil(o.DateEnded) {
		return nil, false
	}
	return o.DateEnded, true
}

// HasDateEnded returns a boolean if a field has been set.
func (o *Assetpricehistory) HasDateEnded() bool {
	if o != nil && !IsNil(o.DateEnded) {
		return true
	}

	return false
}

// SetDateEnded gets a reference to the given string and assigns it to the DateEnded field.
func (o *Assetpricehistory) SetDateEnded(v string) {
	o.DateEnded = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Assetpricehistory) GetDateCreated() string {
	if o == nil || IsNil(o.DateCreated) {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assetpricehistory) GetDateCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Assetpricehistory) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *Assetpricehistory) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Assetpricehistory) GetLastUpdated() string {
	if o == nil || IsNil(o.LastUpdated) {
		var ret string
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Assetpricehistory) GetLastUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Assetpricehistory) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given string and assigns it to the LastUpdated field.
func (o *Assetpricehistory) SetLastUpdated(v string) {
	o.LastUpdated = &v
}

// GetActive returns the Active field value
func (o *Assetpricehistory) GetActive() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *Assetpricehistory) GetActiveOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *Assetpricehistory) SetActive(v string) {
	o.Active = v
}

func (o Assetpricehistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Assetpricehistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AphId) {
		toSerialize["aph_id"] = o.AphId
	}
	toSerialize["asset_id"] = o.AssetId
	if !IsNil(o.PriceUsd) {
		toSerialize["price_usd"] = o.PriceUsd
	}
	if !IsNil(o.PriceCredits) {
		toSerialize["price_credits"] = o.PriceCredits
	}
	if !IsNil(o.DiscountPercentage) {
		toSerialize["discount_percentage"] = o.DiscountPercentage
	}
	if !IsNil(o.SaleStartDate) {
		toSerialize["sale_start_date"] = o.SaleStartDate
	}
	if !IsNil(o.SaleEndDate) {
		toSerialize["sale_end_date"] = o.SaleEndDate
	}
	if !IsNil(o.DateEnded) {
		toSerialize["date_ended"] = o.DateEnded
	}
	if !IsNil(o.DateCreated) {
		toSerialize["date_created"] = o.DateCreated
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["last_updated"] = o.LastUpdated
	}
	toSerialize["active"] = o.Active
	return toSerialize, nil
}

func (o *Assetpricehistory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset_id",
		"active",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssetpricehistory := _Assetpricehistory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssetpricehistory)

	if err != nil {
		return err
	}

	*o = Assetpricehistory(varAssetpricehistory)

	return err
}

type NullableAssetpricehistory struct {
	value *Assetpricehistory
	isSet bool
}

func (v NullableAssetpricehistory) Get() *Assetpricehistory {
	return v.value
}

func (v *NullableAssetpricehistory) Set(val *Assetpricehistory) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetpricehistory) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetpricehistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetpricehistory(val *Assetpricehistory) *NullableAssetpricehistory {
	return &NullableAssetpricehistory{value: val, isSet: true}
}

func (v NullableAssetpricehistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetpricehistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


