/*
Spartera API Documentation

Auto-generated API documentation for REST services of the Spartera platform

API version: 1.24.0
Contact: support@spartera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sparteraapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Connections type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Connections{}

// Connections Model for every connection setup from our platform
type Connections struct {
	DateCreated *time.Time `json:"date_created,omitempty"`
	LastUpdated *time.Time `json:"last_updated,omitempty"`
	ConnectionId *string `json:"connection_id,omitempty"`
	UserId *string `json:"user_id,omitempty"`
	EngineId int64 `json:"engine_id"`
	CompanyId string `json:"company_id"`
	// Enum type: CredentialType
	CredentialType *string `json:"credential_type,omitempty"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	ProviderDomain *string `json:"provider_domain,omitempty"`
	VerifiedUsageAbility *bool `json:"verified_usage_ability,omitempty"`
}

type _Connections Connections

// NewConnections instantiates a new Connections object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnections(engineId int64, companyId string) *Connections {
	this := Connections{}
	this.EngineId = engineId
	this.CompanyId = companyId
	return &this
}

// NewConnectionsWithDefaults instantiates a new Connections object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionsWithDefaults() *Connections {
	this := Connections{}
	return &this
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Connections) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connections) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Connections) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *Connections) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Connections) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connections) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Connections) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *Connections) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *Connections) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connections) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *Connections) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *Connections) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Connections) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connections) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Connections) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *Connections) SetUserId(v string) {
	o.UserId = &v
}

// GetEngineId returns the EngineId field value
func (o *Connections) GetEngineId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value
// and a boolean to check if the value has been set.
func (o *Connections) GetEngineIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EngineId, true
}

// SetEngineId sets field value
func (o *Connections) SetEngineId(v int64) {
	o.EngineId = v
}

// GetCompanyId returns the CompanyId field value
func (o *Connections) GetCompanyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value
// and a boolean to check if the value has been set.
func (o *Connections) GetCompanyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyId, true
}

// SetCompanyId sets field value
func (o *Connections) SetCompanyId(v string) {
	o.CompanyId = v
}

// GetCredentialType returns the CredentialType field value if set, zero value otherwise.
func (o *Connections) GetCredentialType() string {
	if o == nil || IsNil(o.CredentialType) {
		var ret string
		return ret
	}
	return *o.CredentialType
}

// GetCredentialTypeOk returns a tuple with the CredentialType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connections) GetCredentialTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CredentialType) {
		return nil, false
	}
	return o.CredentialType, true
}

// HasCredentialType returns a boolean if a field has been set.
func (o *Connections) HasCredentialType() bool {
	if o != nil && !IsNil(o.CredentialType) {
		return true
	}

	return false
}

// SetCredentialType gets a reference to the given string and assigns it to the CredentialType field.
func (o *Connections) SetCredentialType(v string) {
	o.CredentialType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Connections) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connections) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Connections) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Connections) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Connections) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connections) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Connections) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Connections) SetDescription(v string) {
	o.Description = &v
}

// GetProviderDomain returns the ProviderDomain field value if set, zero value otherwise.
func (o *Connections) GetProviderDomain() string {
	if o == nil || IsNil(o.ProviderDomain) {
		var ret string
		return ret
	}
	return *o.ProviderDomain
}

// GetProviderDomainOk returns a tuple with the ProviderDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connections) GetProviderDomainOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderDomain) {
		return nil, false
	}
	return o.ProviderDomain, true
}

// HasProviderDomain returns a boolean if a field has been set.
func (o *Connections) HasProviderDomain() bool {
	if o != nil && !IsNil(o.ProviderDomain) {
		return true
	}

	return false
}

// SetProviderDomain gets a reference to the given string and assigns it to the ProviderDomain field.
func (o *Connections) SetProviderDomain(v string) {
	o.ProviderDomain = &v
}

// GetVerifiedUsageAbility returns the VerifiedUsageAbility field value if set, zero value otherwise.
func (o *Connections) GetVerifiedUsageAbility() bool {
	if o == nil || IsNil(o.VerifiedUsageAbility) {
		var ret bool
		return ret
	}
	return *o.VerifiedUsageAbility
}

// GetVerifiedUsageAbilityOk returns a tuple with the VerifiedUsageAbility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connections) GetVerifiedUsageAbilityOk() (*bool, bool) {
	if o == nil || IsNil(o.VerifiedUsageAbility) {
		return nil, false
	}
	return o.VerifiedUsageAbility, true
}

// HasVerifiedUsageAbility returns a boolean if a field has been set.
func (o *Connections) HasVerifiedUsageAbility() bool {
	if o != nil && !IsNil(o.VerifiedUsageAbility) {
		return true
	}

	return false
}

// SetVerifiedUsageAbility gets a reference to the given bool and assigns it to the VerifiedUsageAbility field.
func (o *Connections) SetVerifiedUsageAbility(v bool) {
	o.VerifiedUsageAbility = &v
}

func (o Connections) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Connections) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateCreated) {
		toSerialize["date_created"] = o.DateCreated
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if !IsNil(o.ConnectionId) {
		toSerialize["connection_id"] = o.ConnectionId
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	toSerialize["engine_id"] = o.EngineId
	toSerialize["company_id"] = o.CompanyId
	if !IsNil(o.CredentialType) {
		toSerialize["credential_type"] = o.CredentialType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ProviderDomain) {
		toSerialize["provider_domain"] = o.ProviderDomain
	}
	if !IsNil(o.VerifiedUsageAbility) {
		toSerialize["verified_usage_ability"] = o.VerifiedUsageAbility
	}
	return toSerialize, nil
}

func (o *Connections) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"engine_id",
		"company_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnections := _Connections{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnections)

	if err != nil {
		return err
	}

	*o = Connections(varConnections)

	return err
}

type NullableConnections struct {
	value *Connections
	isSet bool
}

func (v NullableConnections) Get() *Connections {
	return v.value
}

func (v *NullableConnections) Set(val *Connections) {
	v.value = val
	v.isSet = true
}

func (v NullableConnections) IsSet() bool {
	return v.isSet
}

func (v *NullableConnections) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnections(val *Connections) *NullableConnections {
	return &NullableConnections{value: val, isSet: true}
}

func (v NullableConnections) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnections) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


