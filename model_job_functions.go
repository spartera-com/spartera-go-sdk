/*
Spartera API Documentation

Auto-generated API documentation for REST services of the Spartera platform

API version: 1.24.0
Contact: support@spartera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sparteraapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the JobFunctions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobFunctions{}

// JobFunctions Metadata about the different kinds of job function our users have.
type JobFunctions struct {
	DateCreated *time.Time `json:"date_created,omitempty"`
	LastUpdated *time.Time `json:"last_updated,omitempty"`
	FunctionId int64 `json:"function_id"`
	Name string `json:"name"`
}

type _JobFunctions JobFunctions

// NewJobFunctions instantiates a new JobFunctions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobFunctions(functionId int64, name string) *JobFunctions {
	this := JobFunctions{}
	this.FunctionId = functionId
	this.Name = name
	return &this
}

// NewJobFunctionsWithDefaults instantiates a new JobFunctions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobFunctionsWithDefaults() *JobFunctions {
	this := JobFunctions{}
	return &this
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *JobFunctions) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobFunctions) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *JobFunctions) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *JobFunctions) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *JobFunctions) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobFunctions) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *JobFunctions) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *JobFunctions) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetFunctionId returns the FunctionId field value
func (o *JobFunctions) GetFunctionId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FunctionId
}

// GetFunctionIdOk returns a tuple with the FunctionId field value
// and a boolean to check if the value has been set.
func (o *JobFunctions) GetFunctionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FunctionId, true
}

// SetFunctionId sets field value
func (o *JobFunctions) SetFunctionId(v int64) {
	o.FunctionId = v
}

// GetName returns the Name field value
func (o *JobFunctions) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *JobFunctions) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *JobFunctions) SetName(v string) {
	o.Name = v
}

func (o JobFunctions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobFunctions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateCreated) {
		toSerialize["date_created"] = o.DateCreated
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["last_updated"] = o.LastUpdated
	}
	toSerialize["function_id"] = o.FunctionId
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *JobFunctions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"function_id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobFunctions := _JobFunctions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJobFunctions)

	if err != nil {
		return err
	}

	*o = JobFunctions(varJobFunctions)

	return err
}

type NullableJobFunctions struct {
	value *JobFunctions
	isSet bool
}

func (v NullableJobFunctions) Get() *JobFunctions {
	return v.value
}

func (v *NullableJobFunctions) Set(val *JobFunctions) {
	v.value = val
	v.isSet = true
}

func (v NullableJobFunctions) IsSet() bool {
	return v.isSet
}

func (v *NullableJobFunctions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobFunctions(val *JobFunctions) *NullableJobFunctions {
	return &NullableJobFunctions{value: val, isSet: true}
}

func (v NullableJobFunctions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobFunctions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


