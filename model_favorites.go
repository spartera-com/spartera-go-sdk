/*
Spartera API Documentation

Auto-generated API documentation for REST services of the Spartera platform

API version: 1.24.0
Contact: support@spartera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sparteraapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Favorites type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Favorites{}

// Favorites User favorites for marketplace assets
type Favorites struct {
	DateCreated *time.Time `json:"date_created,omitempty"`
	LastUpdated *time.Time `json:"last_updated,omitempty"`
	FavoriteId *int64 `json:"favorite_id,omitempty"`
	AssetId string `json:"asset_id"`
	UserId *string `json:"user_id,omitempty"`
	CompanyId string `json:"company_id"`
	// Optional user notes about this favorite
	Notes *string `json:"notes,omitempty"`
	// Optional category for organizing favorites (e.g., 'Work', 'Research')
	Category *string `json:"category,omitempty"`
	// User-defined priority for sorting (higher = more important)
	Priority int64 `json:"priority"`
}

type _Favorites Favorites

// NewFavorites instantiates a new Favorites object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFavorites(assetId string, companyId string, priority int64) *Favorites {
	this := Favorites{}
	this.AssetId = assetId
	this.CompanyId = companyId
	this.Priority = priority
	return &this
}

// NewFavoritesWithDefaults instantiates a new Favorites object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFavoritesWithDefaults() *Favorites {
	this := Favorites{}
	return &this
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Favorites) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Favorites) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Favorites) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *Favorites) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Favorites) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Favorites) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Favorites) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *Favorites) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetFavoriteId returns the FavoriteId field value if set, zero value otherwise.
func (o *Favorites) GetFavoriteId() int64 {
	if o == nil || IsNil(o.FavoriteId) {
		var ret int64
		return ret
	}
	return *o.FavoriteId
}

// GetFavoriteIdOk returns a tuple with the FavoriteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Favorites) GetFavoriteIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FavoriteId) {
		return nil, false
	}
	return o.FavoriteId, true
}

// HasFavoriteId returns a boolean if a field has been set.
func (o *Favorites) HasFavoriteId() bool {
	if o != nil && !IsNil(o.FavoriteId) {
		return true
	}

	return false
}

// SetFavoriteId gets a reference to the given int64 and assigns it to the FavoriteId field.
func (o *Favorites) SetFavoriteId(v int64) {
	o.FavoriteId = &v
}

// GetAssetId returns the AssetId field value
func (o *Favorites) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *Favorites) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *Favorites) SetAssetId(v string) {
	o.AssetId = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Favorites) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Favorites) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Favorites) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *Favorites) SetUserId(v string) {
	o.UserId = &v
}

// GetCompanyId returns the CompanyId field value
func (o *Favorites) GetCompanyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value
// and a boolean to check if the value has been set.
func (o *Favorites) GetCompanyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyId, true
}

// SetCompanyId sets field value
func (o *Favorites) SetCompanyId(v string) {
	o.CompanyId = v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Favorites) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Favorites) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Favorites) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *Favorites) SetNotes(v string) {
	o.Notes = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Favorites) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Favorites) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Favorites) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *Favorites) SetCategory(v string) {
	o.Category = &v
}

// GetPriority returns the Priority field value
func (o *Favorites) GetPriority() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *Favorites) GetPriorityOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *Favorites) SetPriority(v int64) {
	o.Priority = v
}

func (o Favorites) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Favorites) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateCreated) {
		toSerialize["date_created"] = o.DateCreated
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if !IsNil(o.FavoriteId) {
		toSerialize["favorite_id"] = o.FavoriteId
	}
	toSerialize["asset_id"] = o.AssetId
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	toSerialize["company_id"] = o.CompanyId
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	toSerialize["priority"] = o.Priority
	return toSerialize, nil
}

func (o *Favorites) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset_id",
		"company_id",
		"priority",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFavorites := _Favorites{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFavorites)

	if err != nil {
		return err
	}

	*o = Favorites(varFavorites)

	return err
}

type NullableFavorites struct {
	value *Favorites
	isSet bool
}

func (v NullableFavorites) Get() *Favorites {
	return v.value
}

func (v *NullableFavorites) Set(val *Favorites) {
	v.value = val
	v.isSet = true
}

func (v NullableFavorites) IsSet() bool {
	return v.isSet
}

func (v *NullableFavorites) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFavorites(val *Favorites) *NullableFavorites {
	return &NullableFavorites{value: val, isSet: true}
}

func (v NullableFavorites) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFavorites) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


