/*
Spartera API Documentation

Auto-generated API documentation for REST services of the Spartera platform

API version: 0.0.0
Contact: support@spartera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sparteraapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Apikey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Apikey{}

// Apikey API Keys model storing every key created
type Apikey struct {
	ApiKeyId string `json:"api_key_id"`
	UserId *string `json:"user_id,omitempty"`
	CompanyId string `json:"company_id"`
	RoleId string `json:"role_id"`
	Token string `json:"token"`
	Name *string `json:"name,omitempty"`
	ExpirationDateUtc *string `json:"expiration_date_utc,omitempty"`
	DateCreated *string `json:"date_created,omitempty"`
	LastUpdated *string `json:"last_updated,omitempty"`
	Active *string `json:"active,omitempty"`
}

type _Apikey Apikey

// NewApikey instantiates a new Apikey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApikey(apiKeyId string, companyId string, roleId string, token string) *Apikey {
	this := Apikey{}
	this.ApiKeyId = apiKeyId
	this.CompanyId = companyId
	this.RoleId = roleId
	this.Token = token
	return &this
}

// NewApikeyWithDefaults instantiates a new Apikey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApikeyWithDefaults() *Apikey {
	this := Apikey{}
	return &this
}

// GetApiKeyId returns the ApiKeyId field value
func (o *Apikey) GetApiKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKeyId
}

// GetApiKeyIdOk returns a tuple with the ApiKeyId field value
// and a boolean to check if the value has been set.
func (o *Apikey) GetApiKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKeyId, true
}

// SetApiKeyId sets field value
func (o *Apikey) SetApiKeyId(v string) {
	o.ApiKeyId = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Apikey) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Apikey) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Apikey) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *Apikey) SetUserId(v string) {
	o.UserId = &v
}

// GetCompanyId returns the CompanyId field value
func (o *Apikey) GetCompanyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value
// and a boolean to check if the value has been set.
func (o *Apikey) GetCompanyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyId, true
}

// SetCompanyId sets field value
func (o *Apikey) SetCompanyId(v string) {
	o.CompanyId = v
}

// GetRoleId returns the RoleId field value
func (o *Apikey) GetRoleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value
// and a boolean to check if the value has been set.
func (o *Apikey) GetRoleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleId, true
}

// SetRoleId sets field value
func (o *Apikey) SetRoleId(v string) {
	o.RoleId = v
}

// GetToken returns the Token field value
func (o *Apikey) GetToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Token
}

// GetTokenOk returns a tuple with the Token field value
// and a boolean to check if the value has been set.
func (o *Apikey) GetTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Token, true
}

// SetToken sets field value
func (o *Apikey) SetToken(v string) {
	o.Token = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Apikey) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Apikey) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Apikey) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Apikey) SetName(v string) {
	o.Name = &v
}

// GetExpirationDateUtc returns the ExpirationDateUtc field value if set, zero value otherwise.
func (o *Apikey) GetExpirationDateUtc() string {
	if o == nil || IsNil(o.ExpirationDateUtc) {
		var ret string
		return ret
	}
	return *o.ExpirationDateUtc
}

// GetExpirationDateUtcOk returns a tuple with the ExpirationDateUtc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Apikey) GetExpirationDateUtcOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDateUtc) {
		return nil, false
	}
	return o.ExpirationDateUtc, true
}

// HasExpirationDateUtc returns a boolean if a field has been set.
func (o *Apikey) HasExpirationDateUtc() bool {
	if o != nil && !IsNil(o.ExpirationDateUtc) {
		return true
	}

	return false
}

// SetExpirationDateUtc gets a reference to the given string and assigns it to the ExpirationDateUtc field.
func (o *Apikey) SetExpirationDateUtc(v string) {
	o.ExpirationDateUtc = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Apikey) GetDateCreated() string {
	if o == nil || IsNil(o.DateCreated) {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Apikey) GetDateCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Apikey) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *Apikey) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Apikey) GetLastUpdated() string {
	if o == nil || IsNil(o.LastUpdated) {
		var ret string
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Apikey) GetLastUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Apikey) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given string and assigns it to the LastUpdated field.
func (o *Apikey) SetLastUpdated(v string) {
	o.LastUpdated = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Apikey) GetActive() string {
	if o == nil || IsNil(o.Active) {
		var ret string
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Apikey) GetActiveOk() (*string, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Apikey) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given string and assigns it to the Active field.
func (o *Apikey) SetActive(v string) {
	o.Active = &v
}

func (o Apikey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Apikey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["api_key_id"] = o.ApiKeyId
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	toSerialize["company_id"] = o.CompanyId
	toSerialize["role_id"] = o.RoleId
	toSerialize["token"] = o.Token
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ExpirationDateUtc) {
		toSerialize["expiration_date_utc"] = o.ExpirationDateUtc
	}
	if !IsNil(o.DateCreated) {
		toSerialize["date_created"] = o.DateCreated
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

func (o *Apikey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"api_key_id",
		"company_id",
		"role_id",
		"token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApikey := _Apikey{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varApikey)

	if err != nil {
		return err
	}

	*o = Apikey(varApikey)

	return err
}

type NullableApikey struct {
	value *Apikey
	isSet bool
}

func (v NullableApikey) Get() *Apikey {
	return v.value
}

func (v *NullableApikey) Set(val *Apikey) {
	v.value = val
	v.isSet = true
}

func (v NullableApikey) IsSet() bool {
	return v.isSet
}

func (v *NullableApikey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApikey(val *Apikey) *NullableApikey {
	return &NullableApikey{value: val, isSet: true}
}

func (v NullableApikey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApikey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


