/*
Spartera API Documentation

Auto-generated API documentation for REST services of the Spartera platform

API version: 1.24.0
Contact: support@spartera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sparteraapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AssetPriceHistory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetPriceHistory{}

// AssetPriceHistory Pricing history for an asset
type AssetPriceHistory struct {
	DateCreated *time.Time `json:"date_created,omitempty"`
	LastUpdated *time.Time `json:"last_updated,omitempty"`
	AphId *string `json:"aph_id,omitempty"`
	AssetId string `json:"asset_id"`
	PriceUsd *float64 `json:"price_usd,omitempty"`
	// When did the price end (Datetime)
	DateEnded *time.Time `json:"date_ended,omitempty"`
}

type _AssetPriceHistory AssetPriceHistory

// NewAssetPriceHistory instantiates a new AssetPriceHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetPriceHistory(assetId string) *AssetPriceHistory {
	this := AssetPriceHistory{}
	this.AssetId = assetId
	return &this
}

// NewAssetPriceHistoryWithDefaults instantiates a new AssetPriceHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetPriceHistoryWithDefaults() *AssetPriceHistory {
	this := AssetPriceHistory{}
	return &this
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *AssetPriceHistory) GetDateCreated() time.Time {
	if o == nil || IsNil(o.DateCreated) {
		var ret time.Time
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetPriceHistory) GetDateCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *AssetPriceHistory) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given time.Time and assigns it to the DateCreated field.
func (o *AssetPriceHistory) SetDateCreated(v time.Time) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *AssetPriceHistory) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetPriceHistory) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *AssetPriceHistory) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *AssetPriceHistory) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetAphId returns the AphId field value if set, zero value otherwise.
func (o *AssetPriceHistory) GetAphId() string {
	if o == nil || IsNil(o.AphId) {
		var ret string
		return ret
	}
	return *o.AphId
}

// GetAphIdOk returns a tuple with the AphId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetPriceHistory) GetAphIdOk() (*string, bool) {
	if o == nil || IsNil(o.AphId) {
		return nil, false
	}
	return o.AphId, true
}

// HasAphId returns a boolean if a field has been set.
func (o *AssetPriceHistory) HasAphId() bool {
	if o != nil && !IsNil(o.AphId) {
		return true
	}

	return false
}

// SetAphId gets a reference to the given string and assigns it to the AphId field.
func (o *AssetPriceHistory) SetAphId(v string) {
	o.AphId = &v
}

// GetAssetId returns the AssetId field value
func (o *AssetPriceHistory) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *AssetPriceHistory) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *AssetPriceHistory) SetAssetId(v string) {
	o.AssetId = v
}

// GetPriceUsd returns the PriceUsd field value if set, zero value otherwise.
func (o *AssetPriceHistory) GetPriceUsd() float64 {
	if o == nil || IsNil(o.PriceUsd) {
		var ret float64
		return ret
	}
	return *o.PriceUsd
}

// GetPriceUsdOk returns a tuple with the PriceUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetPriceHistory) GetPriceUsdOk() (*float64, bool) {
	if o == nil || IsNil(o.PriceUsd) {
		return nil, false
	}
	return o.PriceUsd, true
}

// HasPriceUsd returns a boolean if a field has been set.
func (o *AssetPriceHistory) HasPriceUsd() bool {
	if o != nil && !IsNil(o.PriceUsd) {
		return true
	}

	return false
}

// SetPriceUsd gets a reference to the given float64 and assigns it to the PriceUsd field.
func (o *AssetPriceHistory) SetPriceUsd(v float64) {
	o.PriceUsd = &v
}

// GetDateEnded returns the DateEnded field value if set, zero value otherwise.
func (o *AssetPriceHistory) GetDateEnded() time.Time {
	if o == nil || IsNil(o.DateEnded) {
		var ret time.Time
		return ret
	}
	return *o.DateEnded
}

// GetDateEndedOk returns a tuple with the DateEnded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetPriceHistory) GetDateEndedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateEnded) {
		return nil, false
	}
	return o.DateEnded, true
}

// HasDateEnded returns a boolean if a field has been set.
func (o *AssetPriceHistory) HasDateEnded() bool {
	if o != nil && !IsNil(o.DateEnded) {
		return true
	}

	return false
}

// SetDateEnded gets a reference to the given time.Time and assigns it to the DateEnded field.
func (o *AssetPriceHistory) SetDateEnded(v time.Time) {
	o.DateEnded = &v
}

func (o AssetPriceHistory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetPriceHistory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DateCreated) {
		toSerialize["date_created"] = o.DateCreated
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if !IsNil(o.AphId) {
		toSerialize["aph_id"] = o.AphId
	}
	toSerialize["asset_id"] = o.AssetId
	if !IsNil(o.PriceUsd) {
		toSerialize["price_usd"] = o.PriceUsd
	}
	if !IsNil(o.DateEnded) {
		toSerialize["date_ended"] = o.DateEnded
	}
	return toSerialize, nil
}

func (o *AssetPriceHistory) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssetPriceHistory := _AssetPriceHistory{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssetPriceHistory)

	if err != nil {
		return err
	}

	*o = AssetPriceHistory(varAssetPriceHistory)

	return err
}

type NullableAssetPriceHistory struct {
	value *AssetPriceHistory
	isSet bool
}

func (v NullableAssetPriceHistory) Get() *AssetPriceHistory {
	return v.value
}

func (v *NullableAssetPriceHistory) Set(val *AssetPriceHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetPriceHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetPriceHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetPriceHistory(val *AssetPriceHistory) *NullableAssetPriceHistory {
	return &NullableAssetPriceHistory{value: val, isSet: true}
}

func (v NullableAssetPriceHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetPriceHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


