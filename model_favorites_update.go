/*
Spartera API Documentation

Auto-generated API documentation for REST services of the Spartera platform

API version: 1.24.0
Contact: support@spartera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sparteraapi

import (
	"encoding/json"
)

// checks if the FavoritesUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FavoritesUpdate{}

// FavoritesUpdate Update schema for modifying Favorite
type FavoritesUpdate struct {
	AssetId *string `json:"asset_id,omitempty"`
	UserId *string `json:"user_id,omitempty"`
	CompanyId *string `json:"company_id,omitempty"`
	// Optional user notes about this favorite
	Notes *string `json:"notes,omitempty"`
	// Optional category for organizing favorites (e.g., 'Work', 'Research')
	Category *string `json:"category,omitempty"`
	// User-defined priority for sorting (higher = more important)
	Priority *int64 `json:"priority,omitempty"`
}

// NewFavoritesUpdate instantiates a new FavoritesUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFavoritesUpdate() *FavoritesUpdate {
	this := FavoritesUpdate{}
	return &this
}

// NewFavoritesUpdateWithDefaults instantiates a new FavoritesUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFavoritesUpdateWithDefaults() *FavoritesUpdate {
	this := FavoritesUpdate{}
	return &this
}

// GetAssetId returns the AssetId field value if set, zero value otherwise.
func (o *FavoritesUpdate) GetAssetId() string {
	if o == nil || IsNil(o.AssetId) {
		var ret string
		return ret
	}
	return *o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FavoritesUpdate) GetAssetIdOk() (*string, bool) {
	if o == nil || IsNil(o.AssetId) {
		return nil, false
	}
	return o.AssetId, true
}

// HasAssetId returns a boolean if a field has been set.
func (o *FavoritesUpdate) HasAssetId() bool {
	if o != nil && !IsNil(o.AssetId) {
		return true
	}

	return false
}

// SetAssetId gets a reference to the given string and assigns it to the AssetId field.
func (o *FavoritesUpdate) SetAssetId(v string) {
	o.AssetId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *FavoritesUpdate) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FavoritesUpdate) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *FavoritesUpdate) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *FavoritesUpdate) SetUserId(v string) {
	o.UserId = &v
}

// GetCompanyId returns the CompanyId field value if set, zero value otherwise.
func (o *FavoritesUpdate) GetCompanyId() string {
	if o == nil || IsNil(o.CompanyId) {
		var ret string
		return ret
	}
	return *o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FavoritesUpdate) GetCompanyIdOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyId) {
		return nil, false
	}
	return o.CompanyId, true
}

// HasCompanyId returns a boolean if a field has been set.
func (o *FavoritesUpdate) HasCompanyId() bool {
	if o != nil && !IsNil(o.CompanyId) {
		return true
	}

	return false
}

// SetCompanyId gets a reference to the given string and assigns it to the CompanyId field.
func (o *FavoritesUpdate) SetCompanyId(v string) {
	o.CompanyId = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *FavoritesUpdate) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FavoritesUpdate) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *FavoritesUpdate) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *FavoritesUpdate) SetNotes(v string) {
	o.Notes = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *FavoritesUpdate) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FavoritesUpdate) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *FavoritesUpdate) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *FavoritesUpdate) SetCategory(v string) {
	o.Category = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *FavoritesUpdate) GetPriority() int64 {
	if o == nil || IsNil(o.Priority) {
		var ret int64
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FavoritesUpdate) GetPriorityOk() (*int64, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *FavoritesUpdate) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int64 and assigns it to the Priority field.
func (o *FavoritesUpdate) SetPriority(v int64) {
	o.Priority = &v
}

func (o FavoritesUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FavoritesUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssetId) {
		toSerialize["asset_id"] = o.AssetId
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.CompanyId) {
		toSerialize["company_id"] = o.CompanyId
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	return toSerialize, nil
}

type NullableFavoritesUpdate struct {
	value *FavoritesUpdate
	isSet bool
}

func (v NullableFavoritesUpdate) Get() *FavoritesUpdate {
	return v.value
}

func (v *NullableFavoritesUpdate) Set(val *FavoritesUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableFavoritesUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableFavoritesUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFavoritesUpdate(val *FavoritesUpdate) *NullableFavoritesUpdate {
	return &NullableFavoritesUpdate{value: val, isSet: true}
}

func (v NullableFavoritesUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFavoritesUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


