/*
Spartera API Documentation

Auto-generated API documentation for REST services of the Spartera platform

API version: 0.0.0
Contact: support@spartera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sparteraapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Connection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Connection{}

// Connection Model for every connection setup from our platform
type Connection struct {
	ConnectionId *string `json:"connection_id,omitempty"`
	UserId *string `json:"user_id,omitempty"`
	EngineId string `json:"engine_id"`
	CompanyId string `json:"company_id"`
	CredentialType *string `json:"credential_type,omitempty"`
	ApiProvider *string `json:"api_provider,omitempty"`
	ApiEndpoint *string `json:"api_endpoint,omitempty"`
	ApiKeyLocation *string `json:"api_key_location,omitempty"`
	ApiKeyParam *string `json:"api_key_param,omitempty"`
	ApiKeyValue *string `json:"api_key_value,omitempty"`
	Visibility string `json:"visibility"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	GcpSecretId *string `json:"gcp_secret_id,omitempty"`
	ProviderDomain *string `json:"provider_domain,omitempty"`
	VerifiedUsageAbility *string `json:"verified_usage_ability,omitempty"`
	DateCreated *string `json:"date_created,omitempty"`
	LastUpdated *string `json:"last_updated,omitempty"`
	Active *string `json:"active,omitempty"`
}

type _Connection Connection

// NewConnection instantiates a new Connection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnection(engineId string, companyId string, visibility string) *Connection {
	this := Connection{}
	this.EngineId = engineId
	this.CompanyId = companyId
	this.Visibility = visibility
	return &this
}

// NewConnectionWithDefaults instantiates a new Connection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionWithDefaults() *Connection {
	this := Connection{}
	return &this
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *Connection) GetConnectionId() string {
	if o == nil || IsNil(o.ConnectionId) {
		var ret string
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetConnectionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *Connection) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given string and assigns it to the ConnectionId field.
func (o *Connection) SetConnectionId(v string) {
	o.ConnectionId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Connection) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Connection) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *Connection) SetUserId(v string) {
	o.UserId = &v
}

// GetEngineId returns the EngineId field value
func (o *Connection) GetEngineId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value
// and a boolean to check if the value has been set.
func (o *Connection) GetEngineIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EngineId, true
}

// SetEngineId sets field value
func (o *Connection) SetEngineId(v string) {
	o.EngineId = v
}

// GetCompanyId returns the CompanyId field value
func (o *Connection) GetCompanyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value
// and a boolean to check if the value has been set.
func (o *Connection) GetCompanyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyId, true
}

// SetCompanyId sets field value
func (o *Connection) SetCompanyId(v string) {
	o.CompanyId = v
}

// GetCredentialType returns the CredentialType field value if set, zero value otherwise.
func (o *Connection) GetCredentialType() string {
	if o == nil || IsNil(o.CredentialType) {
		var ret string
		return ret
	}
	return *o.CredentialType
}

// GetCredentialTypeOk returns a tuple with the CredentialType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetCredentialTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CredentialType) {
		return nil, false
	}
	return o.CredentialType, true
}

// HasCredentialType returns a boolean if a field has been set.
func (o *Connection) HasCredentialType() bool {
	if o != nil && !IsNil(o.CredentialType) {
		return true
	}

	return false
}

// SetCredentialType gets a reference to the given string and assigns it to the CredentialType field.
func (o *Connection) SetCredentialType(v string) {
	o.CredentialType = &v
}

// GetApiProvider returns the ApiProvider field value if set, zero value otherwise.
func (o *Connection) GetApiProvider() string {
	if o == nil || IsNil(o.ApiProvider) {
		var ret string
		return ret
	}
	return *o.ApiProvider
}

// GetApiProviderOk returns a tuple with the ApiProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetApiProviderOk() (*string, bool) {
	if o == nil || IsNil(o.ApiProvider) {
		return nil, false
	}
	return o.ApiProvider, true
}

// HasApiProvider returns a boolean if a field has been set.
func (o *Connection) HasApiProvider() bool {
	if o != nil && !IsNil(o.ApiProvider) {
		return true
	}

	return false
}

// SetApiProvider gets a reference to the given string and assigns it to the ApiProvider field.
func (o *Connection) SetApiProvider(v string) {
	o.ApiProvider = &v
}

// GetApiEndpoint returns the ApiEndpoint field value if set, zero value otherwise.
func (o *Connection) GetApiEndpoint() string {
	if o == nil || IsNil(o.ApiEndpoint) {
		var ret string
		return ret
	}
	return *o.ApiEndpoint
}

// GetApiEndpointOk returns a tuple with the ApiEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetApiEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.ApiEndpoint) {
		return nil, false
	}
	return o.ApiEndpoint, true
}

// HasApiEndpoint returns a boolean if a field has been set.
func (o *Connection) HasApiEndpoint() bool {
	if o != nil && !IsNil(o.ApiEndpoint) {
		return true
	}

	return false
}

// SetApiEndpoint gets a reference to the given string and assigns it to the ApiEndpoint field.
func (o *Connection) SetApiEndpoint(v string) {
	o.ApiEndpoint = &v
}

// GetApiKeyLocation returns the ApiKeyLocation field value if set, zero value otherwise.
func (o *Connection) GetApiKeyLocation() string {
	if o == nil || IsNil(o.ApiKeyLocation) {
		var ret string
		return ret
	}
	return *o.ApiKeyLocation
}

// GetApiKeyLocationOk returns a tuple with the ApiKeyLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetApiKeyLocationOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKeyLocation) {
		return nil, false
	}
	return o.ApiKeyLocation, true
}

// HasApiKeyLocation returns a boolean if a field has been set.
func (o *Connection) HasApiKeyLocation() bool {
	if o != nil && !IsNil(o.ApiKeyLocation) {
		return true
	}

	return false
}

// SetApiKeyLocation gets a reference to the given string and assigns it to the ApiKeyLocation field.
func (o *Connection) SetApiKeyLocation(v string) {
	o.ApiKeyLocation = &v
}

// GetApiKeyParam returns the ApiKeyParam field value if set, zero value otherwise.
func (o *Connection) GetApiKeyParam() string {
	if o == nil || IsNil(o.ApiKeyParam) {
		var ret string
		return ret
	}
	return *o.ApiKeyParam
}

// GetApiKeyParamOk returns a tuple with the ApiKeyParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetApiKeyParamOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKeyParam) {
		return nil, false
	}
	return o.ApiKeyParam, true
}

// HasApiKeyParam returns a boolean if a field has been set.
func (o *Connection) HasApiKeyParam() bool {
	if o != nil && !IsNil(o.ApiKeyParam) {
		return true
	}

	return false
}

// SetApiKeyParam gets a reference to the given string and assigns it to the ApiKeyParam field.
func (o *Connection) SetApiKeyParam(v string) {
	o.ApiKeyParam = &v
}

// GetApiKeyValue returns the ApiKeyValue field value if set, zero value otherwise.
func (o *Connection) GetApiKeyValue() string {
	if o == nil || IsNil(o.ApiKeyValue) {
		var ret string
		return ret
	}
	return *o.ApiKeyValue
}

// GetApiKeyValueOk returns a tuple with the ApiKeyValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetApiKeyValueOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKeyValue) {
		return nil, false
	}
	return o.ApiKeyValue, true
}

// HasApiKeyValue returns a boolean if a field has been set.
func (o *Connection) HasApiKeyValue() bool {
	if o != nil && !IsNil(o.ApiKeyValue) {
		return true
	}

	return false
}

// SetApiKeyValue gets a reference to the given string and assigns it to the ApiKeyValue field.
func (o *Connection) SetApiKeyValue(v string) {
	o.ApiKeyValue = &v
}

// GetVisibility returns the Visibility field value
func (o *Connection) GetVisibility() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Visibility
}

// GetVisibilityOk returns a tuple with the Visibility field value
// and a boolean to check if the value has been set.
func (o *Connection) GetVisibilityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Visibility, true
}

// SetVisibility sets field value
func (o *Connection) SetVisibility(v string) {
	o.Visibility = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Connection) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Connection) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Connection) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Connection) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Connection) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Connection) SetDescription(v string) {
	o.Description = &v
}

// GetGcpSecretId returns the GcpSecretId field value if set, zero value otherwise.
func (o *Connection) GetGcpSecretId() string {
	if o == nil || IsNil(o.GcpSecretId) {
		var ret string
		return ret
	}
	return *o.GcpSecretId
}

// GetGcpSecretIdOk returns a tuple with the GcpSecretId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetGcpSecretIdOk() (*string, bool) {
	if o == nil || IsNil(o.GcpSecretId) {
		return nil, false
	}
	return o.GcpSecretId, true
}

// HasGcpSecretId returns a boolean if a field has been set.
func (o *Connection) HasGcpSecretId() bool {
	if o != nil && !IsNil(o.GcpSecretId) {
		return true
	}

	return false
}

// SetGcpSecretId gets a reference to the given string and assigns it to the GcpSecretId field.
func (o *Connection) SetGcpSecretId(v string) {
	o.GcpSecretId = &v
}

// GetProviderDomain returns the ProviderDomain field value if set, zero value otherwise.
func (o *Connection) GetProviderDomain() string {
	if o == nil || IsNil(o.ProviderDomain) {
		var ret string
		return ret
	}
	return *o.ProviderDomain
}

// GetProviderDomainOk returns a tuple with the ProviderDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetProviderDomainOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderDomain) {
		return nil, false
	}
	return o.ProviderDomain, true
}

// HasProviderDomain returns a boolean if a field has been set.
func (o *Connection) HasProviderDomain() bool {
	if o != nil && !IsNil(o.ProviderDomain) {
		return true
	}

	return false
}

// SetProviderDomain gets a reference to the given string and assigns it to the ProviderDomain field.
func (o *Connection) SetProviderDomain(v string) {
	o.ProviderDomain = &v
}

// GetVerifiedUsageAbility returns the VerifiedUsageAbility field value if set, zero value otherwise.
func (o *Connection) GetVerifiedUsageAbility() string {
	if o == nil || IsNil(o.VerifiedUsageAbility) {
		var ret string
		return ret
	}
	return *o.VerifiedUsageAbility
}

// GetVerifiedUsageAbilityOk returns a tuple with the VerifiedUsageAbility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetVerifiedUsageAbilityOk() (*string, bool) {
	if o == nil || IsNil(o.VerifiedUsageAbility) {
		return nil, false
	}
	return o.VerifiedUsageAbility, true
}

// HasVerifiedUsageAbility returns a boolean if a field has been set.
func (o *Connection) HasVerifiedUsageAbility() bool {
	if o != nil && !IsNil(o.VerifiedUsageAbility) {
		return true
	}

	return false
}

// SetVerifiedUsageAbility gets a reference to the given string and assigns it to the VerifiedUsageAbility field.
func (o *Connection) SetVerifiedUsageAbility(v string) {
	o.VerifiedUsageAbility = &v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Connection) GetDateCreated() string {
	if o == nil || IsNil(o.DateCreated) {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetDateCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Connection) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *Connection) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Connection) GetLastUpdated() string {
	if o == nil || IsNil(o.LastUpdated) {
		var ret string
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetLastUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Connection) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given string and assigns it to the LastUpdated field.
func (o *Connection) SetLastUpdated(v string) {
	o.LastUpdated = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Connection) GetActive() string {
	if o == nil || IsNil(o.Active) {
		var ret string
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Connection) GetActiveOk() (*string, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Connection) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given string and assigns it to the Active field.
func (o *Connection) SetActive(v string) {
	o.Active = &v
}

func (o Connection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Connection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectionId) {
		toSerialize["connection_id"] = o.ConnectionId
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	toSerialize["engine_id"] = o.EngineId
	toSerialize["company_id"] = o.CompanyId
	if !IsNil(o.CredentialType) {
		toSerialize["credential_type"] = o.CredentialType
	}
	if !IsNil(o.ApiProvider) {
		toSerialize["api_provider"] = o.ApiProvider
	}
	if !IsNil(o.ApiEndpoint) {
		toSerialize["api_endpoint"] = o.ApiEndpoint
	}
	if !IsNil(o.ApiKeyLocation) {
		toSerialize["api_key_location"] = o.ApiKeyLocation
	}
	if !IsNil(o.ApiKeyParam) {
		toSerialize["api_key_param"] = o.ApiKeyParam
	}
	if !IsNil(o.ApiKeyValue) {
		toSerialize["api_key_value"] = o.ApiKeyValue
	}
	toSerialize["visibility"] = o.Visibility
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.GcpSecretId) {
		toSerialize["gcp_secret_id"] = o.GcpSecretId
	}
	if !IsNil(o.ProviderDomain) {
		toSerialize["provider_domain"] = o.ProviderDomain
	}
	if !IsNil(o.VerifiedUsageAbility) {
		toSerialize["verified_usage_ability"] = o.VerifiedUsageAbility
	}
	if !IsNil(o.DateCreated) {
		toSerialize["date_created"] = o.DateCreated
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

func (o *Connection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"engine_id",
		"company_id",
		"visibility",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnection := _Connection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnection)

	if err != nil {
		return err
	}

	*o = Connection(varConnection)

	return err
}

type NullableConnection struct {
	value *Connection
	isSet bool
}

func (v NullableConnection) Get() *Connection {
	return v.value
}

func (v *NullableConnection) Set(val *Connection) {
	v.value = val
	v.isSet = true
}

func (v NullableConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnection(val *Connection) *NullableConnection {
	return &NullableConnection{value: val, isSet: true}
}

func (v NullableConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


