/*
Spartera API Documentation

Testing AlertsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sparteraapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/spartera-com/spartera-go-sdk"
)

func Test_sparteraapi_AlertsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AlertsAPIService CompaniesCompanyIdUsersUserIdAlertsAlertIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var userId string
		var alertId string

		resp, httpRes, err := apiClient.AlertsAPI.CompaniesCompanyIdUsersUserIdAlertsAlertIdDelete(context.Background(), companyId, userId, alertId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertsAPIService CompaniesCompanyIdUsersUserIdAlertsAlertIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var userId string
		var alertId string

		resp, httpRes, err := apiClient.AlertsAPI.CompaniesCompanyIdUsersUserIdAlertsAlertIdGet(context.Background(), companyId, userId, alertId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertsAPIService CompaniesCompanyIdUsersUserIdAlertsAlertIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var userId string
		var alertId string

		resp, httpRes, err := apiClient.AlertsAPI.CompaniesCompanyIdUsersUserIdAlertsAlertIdPatch(context.Background(), companyId, userId, alertId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertsAPIService CompaniesCompanyIdUsersUserIdAlertsAssetAssetIdAllGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var userId string
		var assetId string

		resp, httpRes, err := apiClient.AlertsAPI.CompaniesCompanyIdUsersUserIdAlertsAssetAssetIdAllGet(context.Background(), companyId, userId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertsAPIService CompaniesCompanyIdUsersUserIdAlertsAssetAssetIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var userId string
		var assetId string

		resp, httpRes, err := apiClient.AlertsAPI.CompaniesCompanyIdUsersUserIdAlertsAssetAssetIdGet(context.Background(), companyId, userId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertsAPIService CompaniesCompanyIdUsersUserIdAlertsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var userId string

		resp, httpRes, err := apiClient.AlertsAPI.CompaniesCompanyIdUsersUserIdAlertsGet(context.Background(), companyId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AlertsAPIService CompaniesCompanyIdUsersUserIdAlertsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var userId string

		resp, httpRes, err := apiClient.AlertsAPI.CompaniesCompanyIdUsersUserIdAlertsPost(context.Background(), companyId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
