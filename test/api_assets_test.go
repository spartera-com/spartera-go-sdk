/*
Spartera API Documentation

Testing AssetsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sparteraapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/spartera-com/spartera-go-sdk"
)

func Test_sparteraapi_AssetsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AssetsAPIService AnalyzeCompanyHandleAssetsAssetSlugGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyHandle string
		var assetSlug string

		resp, httpRes, err := apiClient.AssetsAPI.AnalyzeCompanyHandleAssetsAssetSlugGet(context.Background(), companyHandle, assetSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService CompaniesCompanyIdAssetsAssetIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var assetId string

		resp, httpRes, err := apiClient.AssetsAPI.CompaniesCompanyIdAssetsAssetIdDelete(context.Background(), companyId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService CompaniesCompanyIdAssetsAssetIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var assetId string

		resp, httpRes, err := apiClient.AssetsAPI.CompaniesCompanyIdAssetsAssetIdGet(context.Background(), companyId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService CompaniesCompanyIdAssetsAssetIdInfoschemaGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var assetId string

		resp, httpRes, err := apiClient.AssetsAPI.CompaniesCompanyIdAssetsAssetIdInfoschemaGet(context.Background(), companyId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService CompaniesCompanyIdAssetsAssetIdInfoschemaSaveGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var assetId string

		resp, httpRes, err := apiClient.AssetsAPI.CompaniesCompanyIdAssetsAssetIdInfoschemaSaveGet(context.Background(), companyId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService CompaniesCompanyIdAssetsAssetIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var assetId string

		resp, httpRes, err := apiClient.AssetsAPI.CompaniesCompanyIdAssetsAssetIdPatch(context.Background(), companyId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService CompaniesCompanyIdAssetsAssetIdPredictedPriceGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var assetId string

		resp, httpRes, err := apiClient.AssetsAPI.CompaniesCompanyIdAssetsAssetIdPredictedPriceGet(context.Background(), companyId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService CompaniesCompanyIdAssetsAssetIdStatisticsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var assetId string

		resp, httpRes, err := apiClient.AssetsAPI.CompaniesCompanyIdAssetsAssetIdStatisticsGet(context.Background(), companyId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService CompaniesCompanyIdAssetsAssetIdTestGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var assetId string

		resp, httpRes, err := apiClient.AssetsAPI.CompaniesCompanyIdAssetsAssetIdTestGet(context.Background(), companyId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService CompaniesCompanyIdAssetsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string

		resp, httpRes, err := apiClient.AssetsAPI.CompaniesCompanyIdAssetsGet(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService CompaniesCompanyIdAssetsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string

		resp, httpRes, err := apiClient.AssetsAPI.CompaniesCompanyIdAssetsPost(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetsAPIService CompaniesCompanyIdAssetsStatisticsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string

		resp, httpRes, err := apiClient.AssetsAPI.CompaniesCompanyIdAssetsStatisticsGet(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
