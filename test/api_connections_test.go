/*
Spartera API Documentation

Testing ConnectionsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sparteraapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/spartera-com/spartera-go-sdk"
)

func Test_sparteraapi_ConnectionsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ConnectionsAPIService CompaniesCompanyIdConnectionsConnectionIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var connectionId string

		resp, httpRes, err := apiClient.ConnectionsAPI.CompaniesCompanyIdConnectionsConnectionIdDelete(context.Background(), companyId, connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConnectionsAPIService CompaniesCompanyIdConnectionsConnectionIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var connectionId string

		resp, httpRes, err := apiClient.ConnectionsAPI.CompaniesCompanyIdConnectionsConnectionIdGet(context.Background(), companyId, connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConnectionsAPIService CompaniesCompanyIdConnectionsConnectionIdInfoschemaGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var connectionId string

		resp, httpRes, err := apiClient.ConnectionsAPI.CompaniesCompanyIdConnectionsConnectionIdInfoschemaGet(context.Background(), companyId, connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConnectionsAPIService CompaniesCompanyIdConnectionsConnectionIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var connectionId string

		resp, httpRes, err := apiClient.ConnectionsAPI.CompaniesCompanyIdConnectionsConnectionIdPatch(context.Background(), companyId, connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConnectionsAPIService CompaniesCompanyIdConnectionsConnectionIdTestGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var connectionId string

		resp, httpRes, err := apiClient.ConnectionsAPI.CompaniesCompanyIdConnectionsConnectionIdTestGet(context.Background(), companyId, connectionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConnectionsAPIService CompaniesCompanyIdConnectionsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string

		resp, httpRes, err := apiClient.ConnectionsAPI.CompaniesCompanyIdConnectionsGet(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ConnectionsAPIService CompaniesCompanyIdConnectionsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string

		resp, httpRes, err := apiClient.ConnectionsAPI.CompaniesCompanyIdConnectionsPost(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
