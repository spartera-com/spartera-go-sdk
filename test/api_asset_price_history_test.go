/*
Spartera API Documentation

Testing AssetPriceHistoryAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sparteraapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/spartera-com/spartera-go-sdk"
)

func Test_sparteraapi_AssetPriceHistoryAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AssetPriceHistoryAPIService CompaniesCompanyIdAssetsAssetIdPricesActiveGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var assetId string

		resp, httpRes, err := apiClient.AssetPriceHistoryAPI.CompaniesCompanyIdAssetsAssetIdPricesActiveGet(context.Background(), companyId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetPriceHistoryAPIService CompaniesCompanyIdAssetsAssetIdPricesAphIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var assetId string
		var aphId string

		resp, httpRes, err := apiClient.AssetPriceHistoryAPI.CompaniesCompanyIdAssetsAssetIdPricesAphIdDelete(context.Background(), companyId, assetId, aphId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetPriceHistoryAPIService CompaniesCompanyIdAssetsAssetIdPricesAphIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var assetId string
		var aphId string

		resp, httpRes, err := apiClient.AssetPriceHistoryAPI.CompaniesCompanyIdAssetsAssetIdPricesAphIdGet(context.Background(), companyId, assetId, aphId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetPriceHistoryAPIService CompaniesCompanyIdAssetsAssetIdPricesAphIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var assetId string
		var aphId string

		resp, httpRes, err := apiClient.AssetPriceHistoryAPI.CompaniesCompanyIdAssetsAssetIdPricesAphIdPatch(context.Background(), companyId, assetId, aphId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetPriceHistoryAPIService CompaniesCompanyIdAssetsAssetIdPricesCalculateCreditsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var assetId string

		resp, httpRes, err := apiClient.AssetPriceHistoryAPI.CompaniesCompanyIdAssetsAssetIdPricesCalculateCreditsPost(context.Background(), companyId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetPriceHistoryAPIService CompaniesCompanyIdAssetsAssetIdPricesDiscountPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var assetId string

		resp, httpRes, err := apiClient.AssetPriceHistoryAPI.CompaniesCompanyIdAssetsAssetIdPricesDiscountPost(context.Background(), companyId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetPriceHistoryAPIService CompaniesCompanyIdAssetsAssetIdPricesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var assetId string

		resp, httpRes, err := apiClient.AssetPriceHistoryAPI.CompaniesCompanyIdAssetsAssetIdPricesGet(context.Background(), companyId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AssetPriceHistoryAPIService CompaniesCompanyIdAssetsAssetIdPricesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var assetId string

		resp, httpRes, err := apiClient.AssetPriceHistoryAPI.CompaniesCompanyIdAssetsAssetIdPricesPost(context.Background(), companyId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
