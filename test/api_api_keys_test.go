/*
Spartera API Documentation

Testing APIKeysAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sparteraapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/spartera-com/spartera-go-sdk"
)

func Test_sparteraapi_APIKeysAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test APIKeysAPIService CompaniesCompanyIdApiKeysApiKeyIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var apiKeyId string

		resp, httpRes, err := apiClient.APIKeysAPI.CompaniesCompanyIdApiKeysApiKeyIdGet(context.Background(), companyId, apiKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIKeysAPIService CompaniesCompanyIdApiKeysApiKeyIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var apiKeyId string

		resp, httpRes, err := apiClient.APIKeysAPI.CompaniesCompanyIdApiKeysApiKeyIdPatch(context.Background(), companyId, apiKeyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIKeysAPIService CompaniesCompanyIdApiKeysGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string

		resp, httpRes, err := apiClient.APIKeysAPI.CompaniesCompanyIdApiKeysGet(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIKeysAPIService CompaniesCompanyIdApiKeysPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string

		resp, httpRes, err := apiClient.APIKeysAPI.CompaniesCompanyIdApiKeysPost(context.Background(), companyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test APIKeysAPIService CompaniesCompanyIdApiKeysTokenDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var token string

		resp, httpRes, err := apiClient.APIKeysAPI.CompaniesCompanyIdApiKeysTokenDelete(context.Background(), companyId, token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
