/*
Spartera API Documentation

Testing FavoritesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package sparteraapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/spartera-com/spartera-go-sdk"
)

func Test_sparteraapi_FavoritesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FavoritesAPIService CompaniesCompanyIdUsersUserIdFavoritesCategoryCategoryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var userId string
		var category string

		resp, httpRes, err := apiClient.FavoritesAPI.CompaniesCompanyIdUsersUserIdFavoritesCategoryCategoryGet(context.Background(), companyId, userId, category).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FavoritesAPIService CompaniesCompanyIdUsersUserIdFavoritesCheckAssetIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var userId string
		var assetId string

		resp, httpRes, err := apiClient.FavoritesAPI.CompaniesCompanyIdUsersUserIdFavoritesCheckAssetIdGet(context.Background(), companyId, userId, assetId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FavoritesAPIService CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var userId string
		var favoriteId string

		resp, httpRes, err := apiClient.FavoritesAPI.CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdDelete(context.Background(), companyId, userId, favoriteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FavoritesAPIService CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var userId string
		var favoriteId string

		resp, httpRes, err := apiClient.FavoritesAPI.CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdGet(context.Background(), companyId, userId, favoriteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FavoritesAPIService CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdPatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var userId string
		var favoriteId string

		resp, httpRes, err := apiClient.FavoritesAPI.CompaniesCompanyIdUsersUserIdFavoritesFavoriteIdPatch(context.Background(), companyId, userId, favoriteId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FavoritesAPIService CompaniesCompanyIdUsersUserIdFavoritesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var userId string

		resp, httpRes, err := apiClient.FavoritesAPI.CompaniesCompanyIdUsersUserIdFavoritesGet(context.Background(), companyId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FavoritesAPIService CompaniesCompanyIdUsersUserIdFavoritesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var userId string

		resp, httpRes, err := apiClient.FavoritesAPI.CompaniesCompanyIdUsersUserIdFavoritesPost(context.Background(), companyId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FavoritesAPIService CompaniesCompanyIdUsersUserIdFavoritesUncategorizedGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var companyId string
		var userId string

		resp, httpRes, err := apiClient.FavoritesAPI.CompaniesCompanyIdUsersUserIdFavoritesUncategorizedGet(context.Background(), companyId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
