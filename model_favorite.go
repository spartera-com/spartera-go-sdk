/*
Spartera API Documentation

Auto-generated API documentation for REST services of the Spartera platform

API version: 0.0.0
Contact: support@spartera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sparteraapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Favorite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Favorite{}

// Favorite User favorites for marketplace assets
type Favorite struct {
	FavoriteId *string `json:"favorite_id,omitempty"`
	AssetId string `json:"asset_id"`
	UserId *string `json:"user_id,omitempty"`
	CompanyId string `json:"company_id"`
	Notes *string `json:"notes,omitempty"`
	Category *string `json:"category,omitempty"`
	Priority string `json:"priority"`
	DateCreated *string `json:"date_created,omitempty"`
	LastUpdated *string `json:"last_updated,omitempty"`
	Active *string `json:"active,omitempty"`
}

type _Favorite Favorite

// NewFavorite instantiates a new Favorite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFavorite(assetId string, companyId string, priority string) *Favorite {
	this := Favorite{}
	this.AssetId = assetId
	this.CompanyId = companyId
	this.Priority = priority
	return &this
}

// NewFavoriteWithDefaults instantiates a new Favorite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFavoriteWithDefaults() *Favorite {
	this := Favorite{}
	return &this
}

// GetFavoriteId returns the FavoriteId field value if set, zero value otherwise.
func (o *Favorite) GetFavoriteId() string {
	if o == nil || IsNil(o.FavoriteId) {
		var ret string
		return ret
	}
	return *o.FavoriteId
}

// GetFavoriteIdOk returns a tuple with the FavoriteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Favorite) GetFavoriteIdOk() (*string, bool) {
	if o == nil || IsNil(o.FavoriteId) {
		return nil, false
	}
	return o.FavoriteId, true
}

// HasFavoriteId returns a boolean if a field has been set.
func (o *Favorite) HasFavoriteId() bool {
	if o != nil && !IsNil(o.FavoriteId) {
		return true
	}

	return false
}

// SetFavoriteId gets a reference to the given string and assigns it to the FavoriteId field.
func (o *Favorite) SetFavoriteId(v string) {
	o.FavoriteId = &v
}

// GetAssetId returns the AssetId field value
func (o *Favorite) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *Favorite) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *Favorite) SetAssetId(v string) {
	o.AssetId = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *Favorite) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Favorite) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *Favorite) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *Favorite) SetUserId(v string) {
	o.UserId = &v
}

// GetCompanyId returns the CompanyId field value
func (o *Favorite) GetCompanyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value
// and a boolean to check if the value has been set.
func (o *Favorite) GetCompanyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyId, true
}

// SetCompanyId sets field value
func (o *Favorite) SetCompanyId(v string) {
	o.CompanyId = v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Favorite) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Favorite) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Favorite) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *Favorite) SetNotes(v string) {
	o.Notes = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Favorite) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Favorite) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Favorite) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *Favorite) SetCategory(v string) {
	o.Category = &v
}

// GetPriority returns the Priority field value
func (o *Favorite) GetPriority() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *Favorite) GetPriorityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *Favorite) SetPriority(v string) {
	o.Priority = v
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise.
func (o *Favorite) GetDateCreated() string {
	if o == nil || IsNil(o.DateCreated) {
		var ret string
		return ret
	}
	return *o.DateCreated
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Favorite) GetDateCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateCreated) {
		return nil, false
	}
	return o.DateCreated, true
}

// HasDateCreated returns a boolean if a field has been set.
func (o *Favorite) HasDateCreated() bool {
	if o != nil && !IsNil(o.DateCreated) {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given string and assigns it to the DateCreated field.
func (o *Favorite) SetDateCreated(v string) {
	o.DateCreated = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Favorite) GetLastUpdated() string {
	if o == nil || IsNil(o.LastUpdated) {
		var ret string
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Favorite) GetLastUpdatedOk() (*string, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Favorite) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given string and assigns it to the LastUpdated field.
func (o *Favorite) SetLastUpdated(v string) {
	o.LastUpdated = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Favorite) GetActive() string {
	if o == nil || IsNil(o.Active) {
		var ret string
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Favorite) GetActiveOk() (*string, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Favorite) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given string and assigns it to the Active field.
func (o *Favorite) SetActive(v string) {
	o.Active = &v
}

func (o Favorite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Favorite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FavoriteId) {
		toSerialize["favorite_id"] = o.FavoriteId
	}
	toSerialize["asset_id"] = o.AssetId
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	toSerialize["company_id"] = o.CompanyId
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	toSerialize["priority"] = o.Priority
	if !IsNil(o.DateCreated) {
		toSerialize["date_created"] = o.DateCreated
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

func (o *Favorite) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset_id",
		"company_id",
		"priority",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFavorite := _Favorite{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFavorite)

	if err != nil {
		return err
	}

	*o = Favorite(varFavorite)

	return err
}

type NullableFavorite struct {
	value *Favorite
	isSet bool
}

func (v NullableFavorite) Get() *Favorite {
	return v.value
}

func (v *NullableFavorite) Set(val *Favorite) {
	v.value = val
	v.isSet = true
}

func (v NullableFavorite) IsSet() bool {
	return v.isSet
}

func (v *NullableFavorite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFavorite(val *Favorite) *NullableFavorite {
	return &NullableFavorite{value: val, isSet: true}
}

func (v NullableFavorite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFavorite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


