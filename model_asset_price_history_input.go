/*
Spartera API Documentation

Auto-generated API documentation for REST services of the Spartera platform

API version: 1.24.0
Contact: support@spartera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sparteraapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the AssetPriceHistoryInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssetPriceHistoryInput{}

// AssetPriceHistoryInput Input schema for creating AssetPriceHistory
type AssetPriceHistoryInput struct {
	AssetId string `json:"asset_id"`
	PriceUsd *float64 `json:"price_usd,omitempty"`
	// When did the price end (Datetime)
	DateEnded *time.Time `json:"date_ended,omitempty"`
}

type _AssetPriceHistoryInput AssetPriceHistoryInput

// NewAssetPriceHistoryInput instantiates a new AssetPriceHistoryInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssetPriceHistoryInput(assetId string) *AssetPriceHistoryInput {
	this := AssetPriceHistoryInput{}
	this.AssetId = assetId
	return &this
}

// NewAssetPriceHistoryInputWithDefaults instantiates a new AssetPriceHistoryInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssetPriceHistoryInputWithDefaults() *AssetPriceHistoryInput {
	this := AssetPriceHistoryInput{}
	return &this
}

// GetAssetId returns the AssetId field value
func (o *AssetPriceHistoryInput) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *AssetPriceHistoryInput) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *AssetPriceHistoryInput) SetAssetId(v string) {
	o.AssetId = v
}

// GetPriceUsd returns the PriceUsd field value if set, zero value otherwise.
func (o *AssetPriceHistoryInput) GetPriceUsd() float64 {
	if o == nil || IsNil(o.PriceUsd) {
		var ret float64
		return ret
	}
	return *o.PriceUsd
}

// GetPriceUsdOk returns a tuple with the PriceUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetPriceHistoryInput) GetPriceUsdOk() (*float64, bool) {
	if o == nil || IsNil(o.PriceUsd) {
		return nil, false
	}
	return o.PriceUsd, true
}

// HasPriceUsd returns a boolean if a field has been set.
func (o *AssetPriceHistoryInput) HasPriceUsd() bool {
	if o != nil && !IsNil(o.PriceUsd) {
		return true
	}

	return false
}

// SetPriceUsd gets a reference to the given float64 and assigns it to the PriceUsd field.
func (o *AssetPriceHistoryInput) SetPriceUsd(v float64) {
	o.PriceUsd = &v
}

// GetDateEnded returns the DateEnded field value if set, zero value otherwise.
func (o *AssetPriceHistoryInput) GetDateEnded() time.Time {
	if o == nil || IsNil(o.DateEnded) {
		var ret time.Time
		return ret
	}
	return *o.DateEnded
}

// GetDateEndedOk returns a tuple with the DateEnded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssetPriceHistoryInput) GetDateEndedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateEnded) {
		return nil, false
	}
	return o.DateEnded, true
}

// HasDateEnded returns a boolean if a field has been set.
func (o *AssetPriceHistoryInput) HasDateEnded() bool {
	if o != nil && !IsNil(o.DateEnded) {
		return true
	}

	return false
}

// SetDateEnded gets a reference to the given time.Time and assigns it to the DateEnded field.
func (o *AssetPriceHistoryInput) SetDateEnded(v time.Time) {
	o.DateEnded = &v
}

func (o AssetPriceHistoryInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssetPriceHistoryInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["asset_id"] = o.AssetId
	if !IsNil(o.PriceUsd) {
		toSerialize["price_usd"] = o.PriceUsd
	}
	if !IsNil(o.DateEnded) {
		toSerialize["date_ended"] = o.DateEnded
	}
	return toSerialize, nil
}

func (o *AssetPriceHistoryInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssetPriceHistoryInput := _AssetPriceHistoryInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssetPriceHistoryInput)

	if err != nil {
		return err
	}

	*o = AssetPriceHistoryInput(varAssetPriceHistoryInput)

	return err
}

type NullableAssetPriceHistoryInput struct {
	value *AssetPriceHistoryInput
	isSet bool
}

func (v NullableAssetPriceHistoryInput) Get() *AssetPriceHistoryInput {
	return v.value
}

func (v *NullableAssetPriceHistoryInput) Set(val *AssetPriceHistoryInput) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetPriceHistoryInput) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetPriceHistoryInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetPriceHistoryInput(val *AssetPriceHistoryInput) *NullableAssetPriceHistoryInput {
	return &NullableAssetPriceHistoryInput{value: val, isSet: true}
}

func (v NullableAssetPriceHistoryInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetPriceHistoryInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


