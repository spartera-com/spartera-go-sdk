/*
Spartera API Documentation

Auto-generated API documentation for REST services of the Spartera platform

API version: 1.24.0
Contact: support@spartera.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sparteraapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AlertsInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertsInput{}

// AlertsInput Input schema for creating Alert
type AlertsInput struct {
	AssetId string `json:"asset_id"`
	UserId *string `json:"user_id,omitempty"`
	CompanyId string `json:"company_id"`
	// Whether this alert is currently active
	IsActive *bool `json:"is_active,omitempty"`
}

type _AlertsInput AlertsInput

// NewAlertsInput instantiates a new AlertsInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertsInput(assetId string, companyId string) *AlertsInput {
	this := AlertsInput{}
	this.AssetId = assetId
	this.CompanyId = companyId
	return &this
}

// NewAlertsInputWithDefaults instantiates a new AlertsInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertsInputWithDefaults() *AlertsInput {
	this := AlertsInput{}
	return &this
}

// GetAssetId returns the AssetId field value
func (o *AlertsInput) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *AlertsInput) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *AlertsInput) SetAssetId(v string) {
	o.AssetId = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *AlertsInput) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertsInput) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *AlertsInput) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *AlertsInput) SetUserId(v string) {
	o.UserId = &v
}

// GetCompanyId returns the CompanyId field value
func (o *AlertsInput) GetCompanyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompanyId
}

// GetCompanyIdOk returns a tuple with the CompanyId field value
// and a boolean to check if the value has been set.
func (o *AlertsInput) GetCompanyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompanyId, true
}

// SetCompanyId sets field value
func (o *AlertsInput) SetCompanyId(v string) {
	o.CompanyId = v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *AlertsInput) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertsInput) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *AlertsInput) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *AlertsInput) SetIsActive(v bool) {
	o.IsActive = &v
}

func (o AlertsInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertsInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["asset_id"] = o.AssetId
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	toSerialize["company_id"] = o.CompanyId
	if !IsNil(o.IsActive) {
		toSerialize["is_active"] = o.IsActive
	}
	return toSerialize, nil
}

func (o *AlertsInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"asset_id",
		"company_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAlertsInput := _AlertsInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAlertsInput)

	if err != nil {
		return err
	}

	*o = AlertsInput(varAlertsInput)

	return err
}

type NullableAlertsInput struct {
	value *AlertsInput
	isSet bool
}

func (v NullableAlertsInput) Get() *AlertsInput {
	return v.value
}

func (v *NullableAlertsInput) Set(val *AlertsInput) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertsInput) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertsInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertsInput(val *AlertsInput) *NullableAlertsInput {
	return &NullableAlertsInput{value: val, isSet: true}
}

func (v NullableAlertsInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertsInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


